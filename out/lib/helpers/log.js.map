{"version":3,"file":"log.js","names":["_readline","_interopRequireDefault","require","_gulplog","e","__esModule","default","reportProgress","task","getter","formatter","level","logResult","start","Date","now","ops","value","toFixed","message","interval","setInterval","Logger","listenerCount","readline","cursorTo","process","stdout","moveCursor","done","err","clearInterval","clearLine","then"],"sources":["../../../src/lib/helpers/log.js"],"sourcesContent":["/* eslint-disable import/prefer-default-export */\r\n\r\nimport readline from 'readline';\r\nimport Logger from 'gulplog';\r\n\r\n/**\r\n * Prints the progress of a task.\r\n * @param {Promise<any>} task The task to print the progress for.\r\n * @param {Object} options The options used.\r\n * @param {function(): number} options.getter A function returning the current progress.\r\n * @param {function(value: number): string} options.formatter A function returning a log message for\r\n * the progress passed.\r\n * @param {string} [options.level='info'] The log level to use.\r\n * @param {boolean} [options.logResult=true] If the final progress should be printed.\r\n * @example <caption>A basic implementation</caption>\r\n * const task = doSomething(); // Returns a Promise\r\n *\r\n * reportProgress(task, {\r\n *   getter: () => getTaskProgress(), // returns a number, e.g. 13 if 13 files have been written\r\n *   formatter: value => `${value} files written`,\r\n * })\r\n *  .then(result => { // Results get passed directly from `task`\r\n *    console.log(`The result is: ${result}`);\r\n *  })\r\n *  .catch(console.error) // which means you need error handling as well!\r\n */\r\nexport function reportProgress(task, { getter, formatter, level = 'info', logResult = true } = {}) {\r\n  const start = Date.now();\r\n  const ops = (value) => (value / ((Date.now() - start) / 1000)).toFixed(1);\r\n  const message = () => {\r\n    const value = getter();\r\n    return `${formatter(value)} (${ops(value)}/s)`;\r\n  };\r\n\r\n  const interval = setInterval(() => {\r\n    if (Logger.listenerCount(level) > 0) {\r\n      Logger[level](message());\r\n\r\n      readline.cursorTo(process.stdout, 0);\r\n      readline.moveCursor(process.stdout, 0, -1);\r\n    }\r\n  }, 80);\r\n\r\n  const done = (err) => {\r\n    clearInterval(interval);\r\n\r\n    if (logResult && !err) {\r\n      Logger[level](message());\r\n    } else if (Logger.listenerCount(level) > 0) {\r\n      readline.cursorTo(process.stdout, 0);\r\n      readline.clearLine(process.stdout);\r\n    }\r\n\r\n    if (err) {\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  return task.then(\r\n    () => done(),\r\n    (err) => done(err)\r\n  );\r\n}\r\n"],"mappings":";;;;;;AAEA,IAAAA,SAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,QAAA,GAAAF,sBAAA,CAAAC,OAAA;AAA6B,SAAAD,uBAAAG,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAH7B;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASG,cAAcA,CAACC,IAAI,EAAE;EAAEC,MAAM;EAAEC,SAAS;EAAEC,KAAK,GAAG,MAAM;EAAEC,SAAS,GAAG;AAAK,CAAC,GAAG,CAAC,CAAC,EAAE;EACjG,MAAMC,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;EACxB,MAAMC,GAAG,GAAIC,KAAK,IAAK,CAACA,KAAK,IAAI,CAACH,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,KAAK,IAAI,IAAI,CAAC,EAAEK,OAAO,CAAC,CAAC,CAAC;EACzE,MAAMC,OAAO,GAAGA,CAAA,KAAM;IACpB,MAAMF,KAAK,GAAGR,MAAM,CAAC,CAAC;IACtB,OAAO,GAAGC,SAAS,CAACO,KAAK,CAAC,KAAKD,GAAG,CAACC,KAAK,CAAC,KAAK;EAChD,CAAC;EAED,MAAMG,QAAQ,GAAGC,WAAW,CAAC,MAAM;IACjC,IAAIC,gBAAM,CAACC,aAAa,CAACZ,KAAK,CAAC,GAAG,CAAC,EAAE;MACnCW,gBAAM,CAACX,KAAK,CAAC,CAACQ,OAAO,CAAC,CAAC,CAAC;MAExBK,iBAAQ,CAACC,QAAQ,CAACC,OAAO,CAACC,MAAM,EAAE,CAAC,CAAC;MACpCH,iBAAQ,CAACI,UAAU,CAACF,OAAO,CAACC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5C;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,IAAI,GAAIC,GAAG,IAAK;IACpBC,aAAa,CAACX,QAAQ,CAAC;IAEvB,IAAIR,SAAS,IAAI,CAACkB,GAAG,EAAE;MACrBR,gBAAM,CAACX,KAAK,CAAC,CAACQ,OAAO,CAAC,CAAC,CAAC;IAC1B,CAAC,MAAM,IAAIG,gBAAM,CAACC,aAAa,CAACZ,KAAK,CAAC,GAAG,CAAC,EAAE;MAC1Ca,iBAAQ,CAACC,QAAQ,CAACC,OAAO,CAACC,MAAM,EAAE,CAAC,CAAC;MACpCH,iBAAQ,CAACQ,SAAS,CAACN,OAAO,CAACC,MAAM,CAAC;IACpC;IAEA,IAAIG,GAAG,EAAE;MACP,MAAMA,GAAG;IACX;EACF,CAAC;EAED,OAAOtB,IAAI,CAACyB,IAAI,CACd,MAAMJ,IAAI,CAAC,CAAC,EACXC,GAAG,IAAKD,IAAI,CAACC,GAAG,CACnB,CAAC;AACH","ignoreList":[]}