{"version":3,"file":"SplittingTransformer.js","names":["_path","require","_fsExtra","_regexp","_PartialTransformer","_interopRequireDefault","e","__esModule","default","SplittingTransformer","PartialTransformer","extension","Error","sourceExtensions","splitFile","node","newExtension","Object","assign","fullyMapped","value","noWrite","createChild","transformFromDB","context","renameTo","name","constructor","readNodeFile","shouldBeTransformed","undefined","combineNodes","sourceNodes","_combineNodes","basename","transformFromFilesystem","hasExtension","fileName","split","relative","regExp","RegExp","escapeForRegExp","join","sourceFiles","childFiles","children","readdir","reduce","current","f","match","push","path","includes","Promise","all","map","readNode","tree","parent","result","n","extname","exports"],"sources":["../../../src/lib/transform/SplittingTransformer.js"],"sourcesContent":["import { extname, basename, join } from 'path';\r\nimport { readdir } from 'fs-extra';\r\nimport { escapeForRegExp } from '../regexp';\r\nimport PartialTransformer from './PartialTransformer.js';\r\n\r\n/**\r\n * A transformer that splits a node into multiple source nodes when pulling.\r\n */\r\nexport default class SplittingTransformer extends PartialTransformer {\r\n  /**\r\n   * The extension to add to container node names when they are pulled.\r\n   * @abstract\r\n   * @type {string}\r\n   */\r\n  static get extension() {\r\n    throw new Error('Must be implemented by all subclasses');\r\n  }\r\n\r\n  /**\r\n   * The source file extensions to allow.\r\n   * @abstract\r\n   * @type {string[]}\r\n   */\r\n  static get sourceExtensions() {\r\n    throw new Error('Must be implemented by all subclasses');\r\n  }\r\n\r\n  /**\r\n   * Splits a {@link Node}: The resulting is a clone of the input file, with a different path.\r\n   * @param {BrowsedNode} node The file to split.\r\n   * @param {?string} newExtension The extension the resulting file gets.\r\n   * @return {BrowsedNode} The resulting node.\r\n   */\r\n  static splitFile(node, newExtension) {\r\n    Object.assign(node, {\r\n      fullyMapped: true,\r\n      value: Object.assign(node.value, {\r\n        noWrite: true,\r\n      }),\r\n    });\r\n\r\n    return node.createChild({ extension: newExtension });\r\n  }\r\n\r\n  /**\r\n   * Renames a container node, should be called by all subclasses.\r\n   * @param {BrowsedNode} node A container node.\r\n   * @param {any} context The tranform context.\r\n   */\r\n  // eslint-disable-next-line no-unused-vars\r\n  async transformFromDB(node, context) {\r\n    node.renameTo(`${node.name}${this.constructor.extension}`);\r\n  }\r\n\r\n  /**\r\n   * Returns `false` for all container nodes, so they don't get read.\r\n   * @param {BrowsedNode} node The node to check.\r\n   * @return {?boolean} If the node should be read.\r\n   */\r\n  readNodeFile(node) {\r\n    return this.shouldBeTransformed(node) ? false : undefined;\r\n  }\r\n\r\n  /**\r\n   * Combines the container node and the source nodes to one single node.\r\n   * @abstract\r\n   * @param {BrowsedNode} node The container node.\r\n   * @param {Map<string, BrowsedNode>} sourceNodes The source nodes.\r\n   * @param {any} context The current context.\r\n   */\r\n  // eslint-disable-next-line no-unused-vars\r\n  combineNodes(node, sourceNodes, context) {\r\n    throw new Error('Must be implemented by all subclasses');\r\n  }\r\n\r\n  /**\r\n   * Combines the container node and the source nodes to one single node by calling\r\n   * {@link SplittingTransformer#combineNodes}.\r\n   * @param {BrowsedNode} node The container node.\r\n   * @param {{ [extension: string]: BrowedNode }} sourceNodes The source nodes.\r\n   * @param {any} context The current context.\r\n   */\r\n  _combineNodes(node, sourceNodes, context) {\r\n    this.combineNodes(node, sourceNodes, context);\r\n    node.renameTo(basename(node.name, this.constructor.extension));\r\n  }\r\n\r\n  /**\r\n   * Reads a given container nodes source nodes and combines them.\r\n   * @param {BrowsedNode} node The node to transform.\r\n   * @param {Object} context The browser context.\r\n   */\r\n  async transformFromFilesystem(node, context) {\r\n    if (!this.shouldBeTransformed(node)) {\r\n      return;\r\n    }\r\n\r\n    const [name, hasExtension] = node.fileName.split(this.constructor.extension);\r\n\r\n    if (hasExtension !== '') {\r\n      // FIXME: Remove\r\n      throw new Error(`${node.relative} shouldn't be transformed`);\r\n    }\r\n\r\n    const regExp = new RegExp(\r\n      `^\\\\.${escapeForRegExp(name)}(${this.constructor.sourceExtensions.join('|')})\\\\.json$`\r\n    );\r\n\r\n    // Find source files an child definition files\r\n    const sourceFiles = [];\r\n    const childFiles = [];\r\n\r\n    const children = (await readdir(node.relative)).reduce((current, f) => {\r\n      if (f.match(regExp)) {\r\n        sourceFiles.push(f);\r\n      } else if (f.match(/^\\..*\\.json$/)) {\r\n        // Other definition file -> child node\r\n        current.push({ name: f, path: join(node.relative, f) });\r\n        childFiles.push(f);\r\n      } else if (!sourceFiles.includes(`.${f}.json`) && !childFiles.includes(`.${f}.json`)) {\r\n        // This might be a child object's folder...\r\n        current.push({ name: f, path: join(node.relative, f) });\r\n      }\r\n\r\n      return current;\r\n    }, []);\r\n\r\n    // Manually set node.children for the container as source browser only handles definition files\r\n    Object.assign(node, { children });\r\n\r\n    const sourceNodes = await Promise.all(\r\n      sourceFiles.map((f) =>\r\n        context.readNode({\r\n          path: join(node.relative, f),\r\n          tree: { parent: node },\r\n        })\r\n      )\r\n    );\r\n\r\n    this._combineNodes(\r\n      node,\r\n      sourceNodes.reduce(\r\n        (result, n) =>\r\n          Object.assign(result, {\r\n            [extname(n.fileName)]: n,\r\n          }),\r\n        {}\r\n      ),\r\n      context\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}