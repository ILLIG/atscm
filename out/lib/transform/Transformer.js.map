{"version":3,"file":"Transformer.js","names":["_gulplog","_interopRequireDefault","require","e","__esModule","default","TransformDirection","exports","FromDB","FromFilesystem","isValidDirection","direction","includes","Transformer","combinedTransformer","transformers","directed","map","t","withDirection","reverse","node","context","transformer","compatTransform","undefined","constructor","Error","readNodeFile","transformFromDB","transformFromFilesystem","transform","bind","fnName","name","Promise","resolve","reject","promise","err","result","_warnedStreamAPI","Logger","debug","Object","assign","then","length"],"sources":["../../../src/lib/transform/Transformer.js"],"sourcesContent":["import Logger from 'gulplog';\r\n\r\n/**\r\n * The directions a transformer can be run in.\r\n * @type {{FromDB: string, FromFilesystem: string}}\r\n */\r\nexport const TransformDirection = {\r\n  FromDB: 'FromDB',\r\n  FromFilesystem: 'FromFilesystem',\r\n};\r\n\r\n/**\r\n * Checks if the given string is a valid {@link TransformDirection}.\r\n * @param {string} direction The direction string to check.\r\n * @return {boolean} `true` if the direction is valid.\r\n */\r\nfunction isValidDirection(direction) {\r\n  return [TransformDirection.FromDB, TransformDirection.FromFilesystem].includes(direction);\r\n}\r\n\r\n/**\r\n * The base transformer class.\r\n * @abstract\r\n */\r\nexport default class Transformer {\r\n  /**\r\n   * Returns a function that combines multiple transformer actions.\r\n   * @param {Transformer[]} transformers An array of transformers.\r\n   * @param {TransformDirection} direction The direction to use.\r\n   * @return {function(node: Node): Promise<any>} The combined transform function.\r\n   */\r\n  static combinedTransformer(transformers, direction) {\r\n    const directed = transformers.map((t) => t.withDirection(direction));\r\n\r\n    if (direction === TransformDirection.FromFilesystem) {\r\n      directed.reverse();\r\n    }\r\n\r\n    return async (node, context) => {\r\n      for (const transformer of directed) {\r\n        if ((await transformer.compatTransform(direction, node, context)) !== undefined) {\r\n          // break;\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Creates a new Transformer with the specified options.\r\n   * @param {Object} [options] The options to use.\r\n   * @param {TransformDirection} [options.direction] The direction to use.\r\n   * @throws {Error} Throws an error if the given direction is invalid.\r\n   */\r\n  constructor({ direction } = {}) {\r\n    if (direction) {\r\n      if (!isValidDirection(direction)) {\r\n        throw new Error('Invalid direction');\r\n      }\r\n      this.direction = direction;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the Transformer with the given direction.\r\n   * @param {TransformDirection} direction The direction to use.\r\n   * @return {Transformer} Itself, to be chainable.\r\n   * @throws {Error} Throws an error if the given direction is invalid.\r\n   */\r\n  withDirection(direction) {\r\n    if (!isValidDirection(direction)) {\r\n      throw new Error('Invalid direction');\r\n    }\r\n\r\n    /**\r\n     * The transformer's direction\r\n     * @type {TransformerDirection}\r\n     */\r\n    this.direction = direction;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Determines if a node's value node should be read, e.G. The *Variable.Bool* file for a node\r\n   * defined in *.Variable.Bool.Json*.\r\n   * @param {FileNode} node The node to read or not.\r\n   * @return {boolean?} *true* if the node's value file should be read, undefined to let other\r\n   * transformers decide.\r\n   */\r\n  // eslint-disable-next-line no-unused-vars\r\n  readNodeFile(node) {\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * **Must be overridden by all subclasses:** Transforms the given node when using\r\n   * {@link TransformDirection.FromDB}.\r\n   * @param {BrowsedNode} node The node to split.\r\n   * @param {Object} context The transform context.\r\n   */\r\n  // eslint-disable-next-line no-unused-vars\r\n  async transformFromDB(node, context) {\r\n    throw new Error('Transformer#transformFromDB must be overridden by all subclasses');\r\n  }\r\n\r\n  /**\r\n   * **Must be overridden by all subclasses:** Transforms the given node when using\r\n   * {@link TransformDirection.FromFilesystem}.\r\n   * @param {BrowsedNode} node The node to transform.\r\n   * @param {Object} context The browser context.\r\n   */\r\n  // eslint-disable-next-line no-unused-vars\r\n  async transformFromFilesystem(node, context) {\r\n    throw new Error('Transformer#transformFromFilesystem must be overridden by all subclasses');\r\n  }\r\n\r\n  /**\r\n   * A transform wrapper that works with both async/await (atscm >= 1) and callback-based\r\n   * (atscm < 1)transformers.\r\n   * @param {TransformDirection} direction The direction to use.\r\n   * @param {Node} node The node to transform.\r\n   * @param {Object} context The browser context.\r\n   */\r\n  compatTransform(direction, node, context) {\r\n    const transform = (direction === TransformDirection.FromDB\r\n      ? this.transformFromDB\r\n      : this.transformFromFilesystem\r\n    ).bind(this);\r\n\r\n    const fnName = `${this.constructor.name}#transform${\r\n      direction === TransformDirection.FromDB ? 'FromDB' : 'FromFilesystem'\r\n    }`;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const promise = transform(node, context, (err, result) => {\r\n        if (!this.constructor._warnedStreamAPI) {\r\n          this.constructor._warnedStreamAPI = true;\r\n          Logger.debug(`Deprecated: ${fnName} uses the Stream API instead of async/await.`);\r\n        }\r\n        if (err) {\r\n          return reject(Object.assign(err, { node }));\r\n        }\r\n\r\n        // Handle \"repush\"\r\n        if (result === node) {\r\n          return resolve();\r\n        }\r\n\r\n        return resolve(result);\r\n      });\r\n\r\n      if (promise instanceof Promise) {\r\n        promise.then(resolve, (err) => reject(Object.assign(err, { node })));\r\n      } else if (this.transformFromDB.length < 3) {\r\n        reject(\r\n          new Error(`${fnName} did not return a Promise.\r\n  - Did you forget \\`async\\`?`)\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}