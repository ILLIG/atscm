{"version":3,"file":"PartialTransformer.js","names":["_Transformer","_interopRequireDefault","require","e","__esModule","default","ModernPartialTransformer","Transformer","shouldBeTransformed","file","Error","exports"],"sources":["../../../src/lib/transform/PartialTransformer.js"],"sourcesContent":["import Transformer from './Transformer';\r\n\r\n/**\r\n * A transformer that transforms only some of the files read.\r\n * @abstract\r\n * @example <caption>Minimum implementation</caption>\r\n * class MyTransformer extends PartialTransformer {\r\n *   shouldBeTransformed(node) {\r\n *     return true; // or false\r\n *   }\r\n *   transformFromFilesystem(state, context) {\r\n *     if (!this.shouldBeTransformed(state.node)) { return; }\r\n *\r\n *     // Apply actual transformation\r\n *   }\r\n * }\r\n */\r\nexport default class ModernPartialTransformer extends Transformer {\r\n  /**\r\n   * `true` if `file` should be transformed.\r\n   * @param {AtviseFile} file The file to transform or not.\r\n   * @return {boolean}\r\n   * @abstract\r\n   */\r\n  // eslint-disable-next-line no-unused-vars\r\n  shouldBeTransformed(file) {\r\n    throw new Error('PartialTransformer#shouldBeTransformed must be implemented by all subclasses');\r\n  }\r\n}\r\n"],"mappings":";;;;;;AAAA,IAAAA,YAAA,GAAAC,sBAAA,CAAAC,OAAA;AAAwC,SAAAD,uBAAAE,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMG,wBAAwB,SAASC,oBAAW,CAAC;EAChE;AACF;AACA;AACA;AACA;AACA;EACE;EACAC,mBAAmBA,CAACC,IAAI,EAAE;IACxB,MAAM,IAAIC,KAAK,CAAC,8EAA8E,CAAC;EACjG;AACF;AAACC,OAAA,CAAAN,OAAA,GAAAC,wBAAA","ignoreList":[]}