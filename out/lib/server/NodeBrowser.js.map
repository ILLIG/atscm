{"version":3,"file":"NodeBrowser.js","names":["_opcua_node_ids","require","_browse_service","_read_service","_variant","_gulplog","_interopRequireDefault","_pQueue","_ProjectConfig","_NodeId","_Node","_Session","e","__esModule","default","HierachicalReferencesTypeIds","Set","ReferenceTypeIds","HasChild","Aggregates","HasComponent","HasOrderedComponent","HasHistoricalConfiguration","HasProperty","HasSubtype","HasEventSource","HasNotifier","Organizes","BrowsedNode","ServerNode","constructor","parent","reference","nodeClass","name","browseName","addReference","toParent","referenceTypeId","value","id","nodeId","addReferences","references","forEach","createChild","options","node","exports","NodeBrowser","concurrency","ignoreNodes","ProjectConfig","handleNode","recursive","queue","PromiseQueue","_handled","Map","_waitingFor","_ignoreNodesRegExp","RegExp","map","n","join","_recursive","_printSortOrderWarning","_handleNode","_pushed","parentNode","ensureHandled","_readValue","isVariable","Promise","resolve","reject","_session","readVariableValue","err","result","then","endsWith","removed","siblings","children","c","idName","filter","existing","exists","find","push","length","namespaceIndex","Logger","warn","toRead","AttributeIds","DataType","ValueRank","attributeId","read","_","dataType","valueRank","arrayType","VariantArrayType","Scalar","Array","_browse","browseDirection","BrowseDirection","Forward","resultMask","browse","data","_browseNode","allReferences","typeDefinitionReference","ref","HasTypeDefinition","isUserGroup","Object","setPrototypeOf","NodeId","prototype","ignored","test","external","_isExternalReference","has","split","preserveSortOrderNodes","prefix","subPath","isExternal","get","undefined","add","earlierParent","ReferenceTypeNames","set","debug","_push","error","originalId","isPaused","addAll","child","_process","idValue","delete","dep","dependencies","catch","_reject","addNode","transform","_sourceNodesRegExp","_hasDependencies","dependencyCount","values","concat","_getSourceNodes","nodeIds","browseUp","path","Inverse","unshift","ObjectIds","RootFolder","Error","browseDown","target","all","i","pathDown","reduce","replace","Session","create","nodes","processError","pause","clear","onIdle","close","keys","unresolved","entries","to","from","type","refs","size","pushed"],"sources":["../../../src/lib/server/NodeBrowser.js"],"sourcesContent":["import { ObjectIds } from 'node-opcua/lib/opcua_node_ids.js';\r\nimport { BrowseDirection } from 'node-opcua/lib/services/browse_service.js';\r\nimport { AttributeIds } from 'node-opcua/lib/services/read_service';\r\nimport { VariantArrayType, DataType } from 'node-opcua/lib/datamodel/variant';\r\nimport Logger from 'gulplog';\r\nimport PromiseQueue from 'p-queue';\r\nimport ProjectConfig from '../../config/ProjectConfig';\r\nimport NodeId from '../model/opcua/NodeId';\r\nimport { ServerNode, ReferenceTypeIds, ReferenceTypeNames } from '../model/Node';\r\nimport Session from './Session';\r\n\r\n/**\r\n * A set of all hierarchical reference types.\r\n * @type {Set<number>}\r\n */\r\nconst HierachicalReferencesTypeIds = new Set([\r\n  ReferenceTypeIds.HasChild,\r\n  ReferenceTypeIds.Aggregates,\r\n  ReferenceTypeIds.HasComponent,\r\n  ReferenceTypeIds.HasOrderedComponent,\r\n  ReferenceTypeIds.HasHistoricalConfiguration,\r\n  ReferenceTypeIds.HasProperty,\r\n  ReferenceTypeIds.HasSubtype,\r\n  ReferenceTypeIds.HasEventSource,\r\n  ReferenceTypeIds.HasNotifier,\r\n  ReferenceTypeIds.Organizes,\r\n]);\r\n\r\n/**\r\n * A node discovered while browsing the server's database.\r\n */\r\nexport class BrowsedNode extends ServerNode {\r\n  /**\r\n   * Creates a new node.\r\n   * @param {Object} options The options to use.\r\n   * @param {?BrowsedNode} options.parent The parent node.\r\n   * @param {Object} options.reference The reference to pick metadata from.\r\n   */\r\n  constructor({ parent, reference, nodeClass, name }) {\r\n    super({\r\n      parent,\r\n      nodeClass: reference ? reference.nodeClass : nodeClass,\r\n      name: reference ? reference.browseName.name : name,\r\n    });\r\n\r\n    if (reference) {\r\n      // NOTE: You should always provide reference, this only for #createChild\r\n      this.addReference(ReferenceTypeIds.toParent, reference.referenceTypeId.value);\r\n\r\n      /** The node's id. @type {NodeId} */\r\n      this.id = reference.nodeId;\r\n    }\r\n\r\n    /** The node's value\r\n     * @type {node-opcua~Variant} */\r\n    this.value = {};\r\n  }\r\n\r\n  /**\r\n   * Add multiple references at once.\r\n   * @param {Object[]} references The references to add.\r\n   */\r\n  addReferences(references) {\r\n    references.forEach((reference) => {\r\n      this.addReference(reference.referenceTypeId.value, reference.nodeId.value);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates new child node.\r\n   * @param {Object} options The options to use.\r\n   * @see {Node#createChild}\r\n   */\r\n  createChild(options) {\r\n    const node = super.createChild(options);\r\n\r\n    node.id = this.id;\r\n\r\n    return node;\r\n  }\r\n}\r\n\r\n/**\r\n * Browses the server database.\r\n */\r\nexport default class NodeBrowser {\r\n  /**\r\n   * Creates a new node browser.\r\n   * @param {Object} options The options to use.\r\n   * @param {number} [options.concurrency=250] The maximum of nodes to process in parallel.\r\n   * @param {function(node: BrowsedNode): Promise<any>} options.handleNode A custom node handler.\r\n   * @param {boolean} [options.recursive] If the whole node tree should be processed.\r\n   */\r\n  constructor({\r\n    concurrency = 250,\r\n    ignoreNodes = ProjectConfig.ignoreNodes,\r\n    handleNode,\r\n    recursive = true,\r\n  } = {}) {\r\n    /** The queue used to process nodes in parallel\r\n     * @type {p-queue~PQueue} */\r\n    this.queue = new PromiseQueue({\r\n      // autoStart: false,\r\n      concurrency,\r\n    });\r\n\r\n    /** A map of nodes already handled. Keys are ids, values are `true` if the node was already\r\n     * pushed and `false` otherwise.\r\n     * @type {Map<string, boolean>}\r\n     * */\r\n    this._handled = new Map();\r\n\r\n    this._waitingFor = {};\r\n\r\n    /** A regular expression matching all ignored nodes. @type {RegExp} */\r\n    this._ignoreNodesRegExp = new RegExp(`^(${ignoreNodes.map((n) => n.value).join('|')})`);\r\n\r\n    /** If the browser should recurse. @type {boolean} */\r\n    this._recursive = recursive;\r\n\r\n    /** If a warning should be printed for attempting to pull sort order nodes\r\n     * @type {boolean} */\r\n    this._printSortOrderWarning = recursive;\r\n\r\n    /** The custom node handler. @type {function(node: BrowsedNode): Promise<any>} */\r\n    this._handleNode = handleNode;\r\n\r\n    /** The number of pushed (discovered and handled) nodes. @type {number} */\r\n    this._pushed = 0;\r\n\r\n    /** A map that maps node ids against their discovered hierarchical parent nodes. Used to detect\r\n     * reference conflicts.\r\n     * @type {Map<string, string>} */\r\n    this.parentNode = new Map();\r\n\r\n    this.ensureHandled = new Set();\r\n  }\r\n\r\n  /**\r\n   * Reads the given node's value.\r\n   * @param {BrowsedNode} node The node to read.\r\n   */\r\n  _readValue(node) {\r\n    if (!node.isVariable) {\r\n      return null;\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      this._session.readVariableValue(node.id, (err, result) => {\r\n        if (err) {\r\n          return reject(err);\r\n        }\r\n        return resolve(result && result.value);\r\n      });\r\n    }).then((value) => {\r\n      if (node.nodeId.endsWith('.SortOrder')) {\r\n        const removed = [];\r\n        const siblings = node.parent.children.map((c) => c.idName).filter((n) => n !== 'SortOrder');\r\n        const existing = value.value\r\n          .map(({ name }) => name)\r\n          .filter((name) => {\r\n            const exists = siblings.find((c) => c === name);\r\n\r\n            if (exists) {\r\n              return true;\r\n            }\r\n\r\n            removed.push(name);\r\n            return false;\r\n          });\r\n\r\n        // We could also add missing references here...\r\n\r\n        if (removed.length) {\r\n          // eslint-disable-next-line no-param-reassign\r\n          value.value = existing.map((name) => ({ namespaceIndex: 1, name }));\r\n          Logger.warn(`Removed ${removed.length} invalid references from '${node.nodeId}'`);\r\n        }\r\n      }\r\n\r\n      if (value) {\r\n        return value;\r\n      }\r\n\r\n      // Node is a variable but has no value -> Need to read dataType and arrayType directly.\r\n      return new Promise((resolve, reject) => {\r\n        const toRead = [AttributeIds.DataType, AttributeIds.ValueRank].map((attributeId) => ({\r\n          nodeId: node.id,\r\n          attributeId,\r\n        }));\r\n        this._session.read(\r\n          toRead,\r\n          (\r\n            err,\r\n            _,\r\n            [\r\n              {\r\n                value: { value: dataType },\r\n              },\r\n              {\r\n                value: { value: valueRank },\r\n              },\r\n            ] = []\r\n          ) => {\r\n            if (err) return reject(err);\r\n\r\n            // FIXME: valueRank -2 (Any) and -3 (ScalarOrOneDimension) are not handled properly here\r\n            const arrayType = valueRank < 0 ? VariantArrayType.Scalar : VariantArrayType.Array;\r\n\r\n            return resolve({\r\n              dataType: DataType[dataType.value],\r\n              arrayType,\r\n              value: null,\r\n            });\r\n          }\r\n        );\r\n      });\r\n    });\r\n  }\r\n\r\n  // FIXME: Debounce รก la https://runkit.com/5c347d277da2ad00125b6bc2/5c50161cbc21520012c42290\r\n  // FIXME: Move to api\r\n  /**\r\n   * Browses the server address space at the given node id.\r\n   * @param {Object} options The options to use.\r\n   */\r\n  _browse({ nodeId, browseDirection = BrowseDirection.Forward, resultMask = 63 }) {\r\n    return new Promise((resolve, reject) => {\r\n      this._session.browse({ nodeId, browseDirection, resultMask }, (err, data = []) =>\r\n        err ? reject(err) : resolve(data[0].references)\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Browses a node.\r\n   * @param {BrowsedNode} node The node to browse.\r\n   */\r\n  _browseNode(node) {\r\n    return this._browse({ nodeId: node.id }).then((allReferences) => {\r\n      const children = [];\r\n      const references = [];\r\n\r\n      const typeDefinitionReference = allReferences.find(\r\n        (ref) => ref.referenceTypeId.value === ReferenceTypeIds.HasTypeDefinition\r\n      );\r\n\r\n      const isUserGroup =\r\n        typeDefinitionReference &&\r\n        typeDefinitionReference.nodeId.value === 'ObjectTypes.ATVISE.Group';\r\n\r\n      allReferences.forEach((reference) => {\r\n        // \"Cast\" ref.nodeId to NodeId\r\n        Object.setPrototypeOf(reference.nodeId, NodeId.prototype);\r\n\r\n        const ignored = this._ignoreNodesRegExp.test(reference.nodeId.value);\r\n        const external = this._isExternalReference(reference.nodeId.value);\r\n\r\n        if (\r\n          HierachicalReferencesTypeIds.has(reference.referenceTypeId.value) &&\r\n          !ignored &&\r\n          !external\r\n        ) {\r\n          if (\r\n            reference.referenceTypeId.value === ReferenceTypeIds.HasHistoricalConfiguration ||\r\n            (isUserGroup && reference.nodeId.value.split(node.nodeId).length === 1)\r\n          ) {\r\n            references.push(reference);\r\n            return;\r\n          }\r\n\r\n          if (\r\n            !ProjectConfig.preserveSortOrderNodes &&\r\n            reference.nodeId.value.endsWith('.SortOrder')\r\n          ) {\r\n            if (this._printSortOrderWarning) {\r\n              Logger.warn(`Skipped pulling an atvise builder sort order node.\r\n - Reason: These nodes are not consistent across pulls.\r\n - You can force pulling them by setting Atviseproject.preserveSortOrderNodes.`);\r\n              this._printSortOrderWarning = false;\r\n            }\r\n            return;\r\n          }\r\n\r\n          const [prefix, subPath] = reference.nodeId.value.split(node.id.value);\r\n          if (!subPath || prefix !== '') {\r\n            if (!ProjectConfig.isExternal(reference.nodeId.parent.value)) {\r\n              references.push(reference);\r\n\r\n              if (this._handled.get(reference.nodeId.value) === undefined) {\r\n                this.ensureHandled.add(reference.nodeId.value);\r\n              }\r\n              return;\r\n            }\r\n          }\r\n\r\n          const earlierParent = this.parentNode.get(reference.nodeId.value);\r\n          if (earlierParent) {\r\n            Logger.warn(`'${\r\n              reference.nodeId.value\r\n            }' was discovered as a child node of both '${earlierParent}' and '${node.id.value}'.\r\n  - Reference type (to the latter): ${ReferenceTypeNames[reference.referenceTypeId.value]} (${\r\n              reference.referenceTypeId.value\r\n            })`);\r\n          }\r\n\r\n          if (this._handled.get(reference.nodeId.value) === undefined) {\r\n            this.parentNode.set(reference.nodeId.value, node.id.value);\r\n            children.push(\r\n              new BrowsedNode({\r\n                parent: node,\r\n                reference,\r\n              })\r\n            );\r\n          } // else node is already handled\r\n        } else if (reference.referenceTypeId.value !== 50) {\r\n          // Added by atvise builder\r\n          // 'HasModelParent' reference set in atvise 3.3.2+\r\n          // Always points to parent node, which atscm already handles\r\n          if (\r\n            reference.referenceTypeId.value === 334 &&\r\n            reference.nodeId.value === (node.parent && node.parent.id.value)\r\n          ) {\r\n            return;\r\n          }\r\n\r\n          // Do not add ignored\r\n          if (!ignored) {\r\n            references.push(reference);\r\n          } else {\r\n            Logger.debug(\r\n              `Ignored reference from ${node.id.value} (${\r\n                ReferenceTypeNames[reference.referenceTypeId.value]\r\n              }) to ${reference.nodeId.value}`\r\n            );\r\n          }\r\n        }\r\n      });\r\n\r\n      // eslint-disable-next-line no-param-reassign\r\n      node.children = children;\r\n      node.addReferences(references);\r\n\r\n      return { children, references };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Finishes processing a given node: After calling {@link NodeBrowser#_handleNode}, it resolves\r\n   * is's dependencies.\r\n   * @param {BrowsedNode} node The node handled.\r\n   */\r\n  async _push(node) {\r\n    if (this._handled.get(node.id.value)) {\r\n      Logger.error('Prevented duplicate handling of', node.id.value);\r\n      return;\r\n    }\r\n\r\n    // Prevent duplicate pushes while reading value file\r\n    this._handled.set(node.id.value, 'processing');\r\n\r\n    // eslint-disable-next-line no-param-reassign\r\n    node.value = (await this._readValue(node)) || node.value;\r\n\r\n    // TODO: Remove additional properties (children, ...) for better memory-usage\r\n\r\n    const originalId = node.id.value;\r\n\r\n    await this._handleNode(node);\r\n\r\n    this._pushed += 1;\r\n\r\n    // Do not proceed if queue is stopped (because an error occured)\r\n    if (!this._recursive || this.queue.isPaused) {\r\n      // Queue is stopped, not adding...\r\n      return;\r\n    }\r\n\r\n    this.queue.addAll(node.children.map((child) => () => this._process(child)));\r\n\r\n    const idValue = node.id.value;\r\n    this._handled.set(idValue, true);\r\n    this.ensureHandled.delete(originalId);\r\n\r\n    // Handle dependencies\r\n    if (this._waitingFor[idValue]) {\r\n      this._waitingFor[idValue].forEach((dep) => {\r\n        // eslint-disable-next-line no-param-reassign\r\n        if (--dep.dependencies === 0) {\r\n          // Adding as dependencies are resolved\r\n          this.queue.add(() => this._push(dep)).catch(this._reject);\r\n        }\r\n      });\r\n\r\n      delete this._waitingFor[idValue];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Instructs the browser to handle a node that would otherwise be queued behind others (eg: its\r\n   * parent node).\r\n   * @param {BrowsedNode} node The node to add.\r\n   * @return {Promise<?BrowsedNode>} The fully processed node.\r\n   */\r\n  addNode(node) {\r\n    if (this.queue.isPaused) {\r\n      Logger.debug('Queue is stopped, not adding...');\r\n      return Promise.resolve();\r\n    }\r\n\r\n    return this.queue.add(() => this._handleNode(node, { transform: false })).catch(this._reject);\r\n  }\r\n\r\n  /**\r\n   * Returns `true` for node ids that should be treated as external references.\r\n   * @param {string|number} idValue Value of the id to check.\r\n   * @return {boolean} If the id should be treated as external.\r\n   */\r\n  _isExternalReference(idValue) {\r\n    // FIXME: Allow plugins\r\n    return typeof idValue !== 'string' || !this._sourceNodesRegExp.test(idValue);\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if a node has dependencies it should be queued behind.\r\n   * @param {BrowsedNode} node The node to check.\r\n   */\r\n  _hasDependencies(node) {\r\n    let dependencyCount = 0;\r\n\r\n    for (const references of node.references.values()) {\r\n      for (const reference of references) {\r\n        if (\r\n          this._handled.get(reference) !== true &&\r\n          !this._isExternalReference(reference) &&\r\n          !this._ignoreNodesRegExp.test(reference)\r\n        ) {\r\n          dependencyCount++;\r\n          this._waitingFor[reference] = (this._waitingFor[reference] || []).concat(node);\r\n        }\r\n      }\r\n    }\r\n\r\n    // eslint-disable-next-line no-param-reassign\r\n    node.dependencies = dependencyCount;\r\n\r\n    return dependencyCount > 0;\r\n  }\r\n\r\n  /**\r\n   * Processes a single node: Requires special error handling.\r\n   * @param {BrowsedNode} node The node to process.\r\n   * @return {Promise<?BrowsedNode>} The fully processed node.\r\n   */\r\n  async _process(node) {\r\n    try {\r\n      if (this._handled.has(node.id.value)) {\r\n        // Already queued\r\n        return undefined;\r\n      }\r\n      this._handled.set(node.id.value, false);\r\n      await this._browseNode(node);\r\n\r\n      if (!this._hasDependencies(node)) {\r\n        await this._push(node);\r\n      }\r\n    } catch (err) {\r\n      this._reject(err);\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  /**\r\n   * Discovers and browses the source nodes.\r\n   * @param {Array<string, NodeId>} nodeIds The source ids.\r\n   * @return {Promise<Node[]>} Resolved once finished.\r\n   */\r\n  _getSourceNodes(nodeIds) {\r\n    const browseUp = ({ nodeId, path = [] }) =>\r\n      this._browse({\r\n        nodeId,\r\n        browseDirection: BrowseDirection.Inverse,\r\n      }).then((references) => {\r\n        for (const reference of references) {\r\n          if (HierachicalReferencesTypeIds.has(reference.referenceTypeId.value)) {\r\n            path.unshift(reference.nodeId);\r\n            return reference.nodeId.value === ObjectIds.RootFolder\r\n              ? path\r\n              : browseUp({ nodeId: reference.nodeId, path });\r\n          }\r\n        }\r\n        throw new Error(`Unable to find parent node of ${nodeId}`);\r\n      });\r\n\r\n    const browseDown = (path, target) =>\r\n      Promise.all(\r\n        path.map((nodeId, i) =>\r\n          this._browse({ nodeId }).then((references) =>\r\n            references.find(\r\n              (ref) => ref.nodeId.value === (path[i + 1] ? path[i + 1].value : target.value)\r\n            )\r\n          )\r\n        )\r\n      );\r\n\r\n    return Promise.all(\r\n      nodeIds.map((nodeId) =>\r\n        browseUp({ nodeId })\r\n          .then((path) => browseDown(path, nodeId))\r\n          .then((pathDown) =>\r\n            pathDown.reduce((parent, reference) => new BrowsedNode({ parent, reference }), null)\r\n          )\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Starts the browser of the given nodes.\r\n   * @param {NodeId[]} nodeIds The nodes to browse.\r\n   * @return {Promise<any>} Resolved once all nodes are finished.\r\n   */\r\n  async browse(nodeIds) {\r\n    this._sourceNodesRegExp = new RegExp(\r\n      `^(${nodeIds.map(({ value }) => `${value.replace(/\\./g, '\\\\.')}`).join('|')})`\r\n    );\r\n\r\n    this._session = await Session.create();\r\n\r\n    // Add source nodes\r\n    const nodes = await this._getSourceNodes(nodeIds);\r\n    this.queue.addAll(nodes.map((node) => () => this._process(node)));\r\n\r\n    // Queue error handling\r\n    let processError = null;\r\n    this._reject = (err) => {\r\n      if (processError) {\r\n        // Multiple errors occured. In most cases this means, that the server connection was closed\r\n        // after the first error.\r\n        Logger.debug('Additional error', err);\r\n        return;\r\n      }\r\n\r\n      processError = err;\r\n      this.queue.pause();\r\n      this.queue.clear();\r\n    };\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.queue.onIdle().then(async () => {\r\n        await Session.close(this._session);\r\n\r\n        if (processError) {\r\n          reject(processError);\r\n          return;\r\n        }\r\n\r\n        if (Object.keys(this._waitingFor).length) {\r\n          const unresolved = Object.entries(this._waitingFor).reduce(\r\n            (all, [to, children]) =>\r\n              all.concat(\r\n                children.map((c) => ({\r\n                  from: c.id.value,\r\n                  to,\r\n                  type:\r\n                    ReferenceTypeNames[\r\n                      Array.from(c.references).find(([, refs]) => refs.has(to))[0]\r\n                    ],\r\n                }))\r\n              ),\r\n            []\r\n          );\r\n\r\n          reject(\r\n            new Error(`Unable to resolve reference${unresolved.length > 1 ? 's' : ''}:\r\n\r\n  ${unresolved.map(({ from, type, to }) => `${from} โ (${type}) โ ${to}`).join('\\n  ')}\r\n`)\r\n          );\r\n          return;\r\n        }\r\n\r\n        if (this.ensureHandled.size) {\r\n          reject(\r\n            new Error(`Some referenced nodes were not handled,\r\n - ${Array.from(this.ensureHandled).join('\\n - ')}`)\r\n          );\r\n          return;\r\n        }\r\n\r\n        if (Array.from(this._handled).find(([, pushed]) => !pushed)) {\r\n          throw new Error('A node was processed, but not pushed');\r\n        }\r\n\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}