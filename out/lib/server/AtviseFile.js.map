{"version":3,"file":"AtviseFile.js","names":["_fs","require","_path","_nodeclass","_variant","_nodeid","_localized_text","_opcua_status_code","_qualified_name","_datavalue","_opcua_node_ids","_expanded_nodeid","_diagnostic_info","_vinyl","_interopRequireDefault","_NodeId","_Object","_mapping","_Types","_interopRequireWildcard","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","AtviseTypesByValue","AtviseTypes","reduce","result","type","assign","typeDefinition","value","AtviseTypesByIdentifier","identifier","ExtensionForDataType","exports","DataType","Boolean","XmlElement","DataTypeForExtension","reverse","types","keys","typeExtensions","map","toLowerCase","VariableTypeDefinition","NodeId","NodeIdType","NUMERIC","PropertyTypeDefinition","ExtensionRegExp","asIs","b","mapPropertyAs","obj","key","dataType","toRawValue","Null","StatusCode","name","QualifiedName","namespaceIndex","LocalizedText","text","locale","DataValue","options","pick","Variant","arrayType","dimensions","getRawValue","DiagnosticInfo","info","decodeAsString","toString","trim","decodeAsInt","parseInt","decodeAsFloat","parseFloat","decodeAsJson","JSON","parse","decodeRawValue","SByte","Byte","Int16","UInt16","Int32","UInt32","Int64","UInt64","Float","Double","String","DateTime","Guid","ExpandedNodeId","toNodeValue","s","Date","ByteString","Buffer","from","data","resolveNodeId","nodeId","defs","split","identifierType","namespace","namespaceUri","serverIndex","opts","def","match","val","slice","StatusCodes","VariantArrayType","Scalar","array","Array","isArray","getNodeValue","rawValue","Error","raw","extensionForDataType","ConfigFileRegexp","AtviseFile","File","pathForReadResult","readResult","path","filePath","nodeClass","NodeClass","Variable","$dataType","$arrayType","references","HasTypeDefinition","fileExtension","keepExtension","atType","encodeValue","stringify","a","toJSON","stringified","decodeValue","buffer","length","normalizeMtime","date","setMilliseconds","fromReadResult","mtime","contents","sortReferences","_nodeClass","_dataType","_arrayType","_references","stat","undefined","_getMetadata","stem","entries","refs","v","_name","extensions","m","relative","dirnameExts","dirname","unshift","ifLastExtensionMatches","matches","fn","pop","complete","ext","Matrix","includes","indexOf","toParent","ReferenceTypeIds","HasProperty","foundAtType","forEach","AtviseResourceType","filter","join","getMetadata","isReferenceConfig","isDisplay","isScript","isQuickDynamic","newValue","createNodeValue","valueOf","fromFilePath","idPath","exts","parentNodeId","id","parts","parent","clone","clonedFile","read","Promise","resolve","reject","readFile","err"],"sources":["../../../src/lib/server/AtviseFile.js"],"sourcesContent":["import { readFile } from 'fs';\r\nimport { dirname } from 'path';\r\nimport { NodeClass } from 'node-opcua/lib/datamodel/nodeclass';\r\nimport { DataType, VariantArrayType, Variant } from 'node-opcua/lib/datamodel/variant';\r\nimport { resolveNodeId } from 'node-opcua/lib/datamodel/nodeid';\r\nimport { LocalizedText } from 'node-opcua/lib/datamodel/localized_text';\r\nimport { StatusCodes } from 'node-opcua/lib/datamodel/opcua_status_code';\r\nimport { QualifiedName } from 'node-opcua/lib/datamodel/qualified_name';\r\nimport { DataValue } from 'node-opcua/lib/datamodel/datavalue';\r\nimport { ReferenceTypeIds } from 'node-opcua/lib/opcua_node_ids';\r\nimport { ExpandedNodeId } from 'node-opcua/lib/datamodel/expanded_nodeid';\r\nimport { DiagnosticInfo } from 'node-opcua/lib/datamodel/diagnostic_info';\r\nimport File from 'vinyl';\r\nimport NodeId from '../model/opcua/NodeId';\r\nimport { reverse, pick } from '../helpers/Object';\r\nimport { sortReferences } from '../helpers/mapping';\r\nimport AtviseTypes, { AtviseResourceType } from './Types';\r\n\r\n/**\r\n * A map of AtviseTypes against their definition id's value.\r\n * @type {Map<String, AtivseType>}\r\n */\r\nconst AtviseTypesByValue = AtviseTypes.reduce(\r\n  (result, type) =>\r\n    Object.assign(result, {\r\n      [type.typeDefinition.value]: type,\r\n    }),\r\n  {}\r\n);\r\n\r\n/**\r\n * A map of AtviseTypes against their identifiers.\r\n * @type {Map<String, AtivseType>}\r\n */\r\nconst AtviseTypesByIdentifier = AtviseTypes.reduce(\r\n  (result, type) =>\r\n    Object.assign(result, {\r\n      [type.identifier]: type,\r\n    }),\r\n  {}\r\n);\r\n\r\n/**\r\n * A map providing shorter extensions for data types\r\n * @type {Map<node-opcua~DataType, String>}\r\n */\r\nexport const ExtensionForDataType = {\r\n  [DataType.Boolean]: 'bool',\r\n  [DataType.XmlElement]: 'xml',\r\n};\r\n\r\n/**\r\n * A map providing data types for shorter extensions (Reverse of {@link DataTypeForExtension}).\r\n * * @type {Map<String, node-opcua~DataType>}\r\n */\r\nexport const DataTypeForExtension = reverse(ExtensionForDataType);\r\n\r\n// Cache DataType\r\n/**\r\n * OPC-UA data type names.\r\n * @type {String[]}\r\n */\r\nconst types = Object.keys(DataType);\r\n\r\n/**\r\n * OPC-UA data type extensions.\r\n * @type {String[]}\r\n */\r\nconst typeExtensions = types.map((t) => t.toLowerCase());\r\n\r\n// Cache TypeDefinitions\r\n/**\r\n * Variable data type definition node id.\r\n * @type {NodeId}\r\n */\r\nconst VariableTypeDefinition = new NodeId(NodeId.NodeIdType.NUMERIC, 62, 0);\r\n/**\r\n * Property data type definition node id.\r\n * @type {NodeId}\r\n */\r\nconst PropertyTypeDefinition = new NodeId(NodeId.NodeIdType.NUMERIC, 68, 0);\r\n\r\n// Cache Regular expressions\r\n/**\r\n * A regular expression picking file extensions from file names.\r\n * @type {RegExp}\r\n */\r\nconst ExtensionRegExp = /\\.([^/\\\\]*)$/;\r\n\r\n/**\r\n * Function that returns the passed argument as is.\r\n * @param {*} b The input argument.\r\n * @return {*} The value passed.\r\n */\r\nconst asIs = (b) => b;\r\n\r\n/**\r\n * Maps a single property of an object using the the mapper defined in *map* for the given\r\n * *dataType*.\r\n * @param {Map<node-opcua~DataType, function} map The mappings to use.\r\n * @param {Object} obj The object to process.\r\n * @param {string} key Name of the property to map.\r\n * @param {node-opcua~DataType} dataType The data type to map the property to.\r\n */\r\nconst mapPropertyAs = (map, obj, key, dataType) => {\r\n  if (obj[key]) {\r\n    return Object.assign(obj, {\r\n      [key]: map[dataType](obj[key]),\r\n    });\r\n  }\r\n\r\n  return obj;\r\n};\r\n\r\n/**\r\n * Mapping functions that return serializable values for a node of the given\r\n * {@link node-opcua~DataType}.\r\n * @type {Map<node-opcua~DataType, function>}\r\n */\r\nconst toRawValue = {\r\n  [DataType.Null]: () => null,\r\n  [DataType.StatusCode]: ({ name }) => name,\r\n  [DataType.QualifiedName]: ({ namespaceIndex, name }) => ({ namespaceIndex, name }),\r\n  [DataType.LocalizedText]: ({ text, locale }) => ({ text, locale }),\r\n  [DataType.DataValue]: (value) => {\r\n    const options = pick(value, [\r\n      'value',\r\n      'statusCode',\r\n      'sourceTimestamp',\r\n      'sourcePicoseconds',\r\n      'serverTimestamp',\r\n      'serverPicoseconds',\r\n    ]);\r\n\r\n    mapPropertyAs(toRawValue, options, 'value', DataType.Variant);\r\n    mapPropertyAs(toRawValue, options, 'statusCode', DataType.StatusCode);\r\n    // NOTE: server- and sourceTimstamps get mapped as dates\r\n\r\n    return options;\r\n  },\r\n  [DataType.Variant]: ({ dataType, arrayType, value, dimensions }) => ({\r\n    dataType,\r\n    arrayType,\r\n    // eslint-disable-next-line no-use-before-define\r\n    value: getRawValue(value, dataType, arrayType),\r\n    dimensions,\r\n  }),\r\n  [DataType.DiagnosticInfo]: (info) => {\r\n    const options = pick(info, [\r\n      'namespaceUri',\r\n      'symbolicId',\r\n      'locale',\r\n      'localizedText',\r\n      'additionalInfo',\r\n      'innerStatusCode',\r\n      'innerDiagnosticInfo',\r\n    ]);\r\n\r\n    mapPropertyAs(toRawValue, options, 'innerStatusCode', DataType.StatusCode);\r\n    mapPropertyAs(toRawValue, options, 'innerDiagnosticInfo', DataType.DiagnosticInfo);\r\n\r\n    return options;\r\n  },\r\n};\r\n\r\n/**\r\n * Decodes a buffer to a string.\r\n * @param {Buffer} b The buffer to decode from.\r\n * @return {string} The buffer's string representation.\r\n */\r\nconst decodeAsString = (b) => b.toString().trim();\r\n\r\n/**\r\n * Decodes a buffer to an integer value.\r\n * @param {Buffer} b The buffer to decode from.\r\n * @return {number} The decoded integer.\r\n */\r\nconst decodeAsInt = (b) => parseInt(decodeAsString(b), 10);\r\n\r\n/**\r\n * Decodes a buffer to a float value.\r\n * @param {Buffer} b The buffer to decode from.\r\n * @return {number} The decoded float.\r\n */\r\nconst decodeAsFloat = (b) => parseFloat(decodeAsString(b));\r\n\r\n/**\r\n * Decodes a buffer using JSON.\r\n * @param {Buffer} b The buffer to decode from.\r\n * @return {*} The decoded value, most likely an Object.\r\n */\r\nconst decodeAsJson = (b) => JSON.parse(b.toString());\r\n\r\n/**\r\n * Mapping functions that return raw values for a stored value of the given type.\r\n * @type {Map<node-opcua~DataType, function>}\r\n */\r\nconst decodeRawValue = {\r\n  [DataType.Null]: () => null,\r\n  [DataType.Boolean]: (b) => decodeAsString(b) === 'true',\r\n  [DataType.SByte]: decodeAsInt,\r\n  [DataType.Byte]: decodeAsInt,\r\n  [DataType.Int16]: decodeAsInt,\r\n  [DataType.UInt16]: decodeAsInt,\r\n  [DataType.Int32]: decodeAsInt,\r\n  [DataType.UInt32]: decodeAsInt,\r\n  [DataType.Int64]: decodeAsJson,\r\n  [DataType.UInt64]: decodeAsJson,\r\n  [DataType.Float]: decodeAsFloat,\r\n  [DataType.Double]: decodeAsFloat,\r\n  [DataType.String]: decodeAsString,\r\n  [DataType.DateTime]: decodeAsString,\r\n  [DataType.Guid]: decodeAsString,\r\n  // ByteString maps to Buffer\r\n  [DataType.XmlElement]: decodeAsString,\r\n  [DataType.NodeId]: decodeAsString,\r\n  [DataType.ExpandedNodeId]: decodeAsString,\r\n  [DataType.StatusCode]: decodeAsString,\r\n  [DataType.QualifiedName]: decodeAsJson,\r\n  [DataType.LocalizedText]: decodeAsJson,\r\n  // FIXME: Add ExtensionObject\r\n  [DataType.DataValue]: decodeAsJson,\r\n  [DataType.Variant]: decodeAsJson,\r\n  [DataType.DiagnosticInfo]: decodeAsJson,\r\n};\r\n\r\n/**\r\n * Mapping functions that return OPC-UA node values for raw values.\r\n * @type {Map<node-opcua~DataType, function>}\r\n */\r\nconst toNodeValue = {\r\n  [DataType.DateTime]: (s) => new Date(s),\r\n  [DataType.ByteString]: (b) => {\r\n    if (b instanceof Buffer) {\r\n      return b;\r\n    }\r\n\r\n    return Buffer.from(b.data, 'binary');\r\n  },\r\n  [DataType.NodeId]: (s) => resolveNodeId(s),\r\n\r\n  // Jep, node-opcua does not provide a resolve function for expanded nodeids\r\n  [DataType.ExpandedNodeId]: (s) => {\r\n    const nodeId = resolveNodeId(s);\r\n    const [value, ...defs] = nodeId.value.split(';');\r\n\r\n    const { identifierType, namespace, namespaceUri, serverIndex } = defs.reduce((opts, def) => {\r\n      const match = def.match(/^([^:]+):(.*)/);\r\n      if (!match) {\r\n        return opts;\r\n      }\r\n\r\n      let [key, val] = match.slice(1); // eslint-disable-line prefer-const\r\n\r\n      if (key === 'serverIndex') {\r\n        val = parseInt(val, 10);\r\n      }\r\n\r\n      return Object.assign(opts, { [key]: val });\r\n    }, Object.assign({}, nodeId));\r\n\r\n    return new ExpandedNodeId(identifierType, value, namespace, namespaceUri, serverIndex);\r\n  },\r\n\r\n  [DataType.StatusCode]: (name) => StatusCodes[name],\r\n  [DataType.QualifiedName]: (options) => new QualifiedName(options),\r\n  [DataType.LocalizedText]: (options) => new LocalizedText(options),\r\n  [DataType.DataValue]: (options) => {\r\n    const opts = options;\r\n\r\n    mapPropertyAs(toNodeValue, opts, 'value', DataType.Variant);\r\n    mapPropertyAs(toNodeValue, opts, 'statusCode', DataType.StatusCode);\r\n    mapPropertyAs(toNodeValue, opts, 'sourceTimestamp', DataType.DateTime);\r\n    mapPropertyAs(toNodeValue, opts, 'serverTimestamp', DataType.DateTime);\r\n\r\n    return new DataValue(opts);\r\n  },\r\n  [DataType.Variant]: ({ dataType, arrayType, value, dimensions }) =>\r\n    new Variant({\r\n      dataType,\r\n      arrayType: VariantArrayType[arrayType],\r\n      value,\r\n      dimensions,\r\n    }),\r\n  [DataType.DiagnosticInfo]: (options) => {\r\n    const opts = options;\r\n\r\n    mapPropertyAs(toNodeValue, opts, 'innerStatusCode', DataType.StatusCode);\r\n    mapPropertyAs(toNodeValue, opts, 'innerDiagnosticInfo', DataType.DiagnosticInfo);\r\n\r\n    return new DiagnosticInfo(opts);\r\n  },\r\n};\r\n\r\n/**\r\n * Returns a node's raw value based on it's OPC-UA value and type.\r\n * @param {*} value A node's OPC-UA value.\r\n * @param {node-opcua~DataType} dataType The node's data type.\r\n * @param {node-opcua~VariantArrayType} arrayType The node's array type.\r\n * @return {*} The raw value of the given node.\r\n */\r\nconst getRawValue = (value, dataType, arrayType) => {\r\n  if (arrayType.value !== VariantArrayType.Scalar.value) {\r\n    const array = Array.isArray(value) ? value : Array.from(value);\r\n\r\n    return array.map((val) => getRawValue(val, dataType, VariantArrayType[arrayType.value - 1]));\r\n  }\r\n\r\n  return (toRawValue[dataType] || asIs)(value);\r\n};\r\n\r\n/**\r\n * Returns a node's OPC-UA value based on it's raw value and type.\r\n * @param {*} rawValue A node's raw value.\r\n * @param {node-opcua~DataType} dataType A node's data type.\r\n * @param {node-opcua~VariantArrayType} arrayType A node's array type.\r\n */\r\nconst getNodeValue = (rawValue, dataType, arrayType) => {\r\n  if (arrayType.value !== VariantArrayType.Scalar.value) {\r\n    if (!Array.isArray(rawValue)) {\r\n      throw new Error('Value is not an array');\r\n    }\r\n\r\n    return rawValue.map((raw) =>\r\n      getNodeValue(raw, dataType, VariantArrayType[arrayType.value - 1])\r\n    );\r\n  }\r\n\r\n  return (toNodeValue[dataType] || asIs)(rawValue);\r\n};\r\n\r\n/**\r\n * Returns the extension for a specific {@link node-opcua~DataType}.\r\n * Algorithm:\r\n *   - if the type has a shortened extension defined in {@link ExtensionForDataType}, return it.\r\n *   - else return the DataType's name, in lowercase letters.\r\n * @param {node-opcua~DataType} dataType The datatype to get the extension for.\r\n * @return {string} The resulting extension.\r\n */\r\nfunction extensionForDataType(dataType) {\r\n  return ExtensionForDataType[dataType] || dataType.toString().toLowerCase();\r\n}\r\n\r\n/**\r\n * A regular expression that maches all reference definition files.\r\n * @type {RegExp}\r\n */\r\nconst ConfigFileRegexp = /^\\.((Object|Variable)(Type)?|Method|View|(Reference|Data)Type)\\.json$/;\r\n\r\n/**\r\n * An extension to {@link vinyl~File} providing some additional, atvise-related properties.\r\n * @property {node-opcua~DataType} AtviseFile#dataType The {@link node-opcua~DataType} the node is\r\n * stored against on atvise server.\r\n * @property {NodeId} typeDefinition The file's type definition on atvise server.\r\n * FIXME: Additional properties not showing in API docs.\r\n */\r\nexport default class AtviseFile extends File {\r\n  /**\r\n   * Returns a storage path for a {@link ReadStream.ReadResult}.\r\n   * @param {ReadStream.ReadResult} readResult The read result to get a path for.\r\n   */\r\n  static pathForReadResult(readResult) {\r\n    let path = readResult.nodeId.filePath;\r\n\r\n    if (readResult.nodeClass.value !== NodeClass.Variable.value) {\r\n      return `${path}/.${readResult.nodeClass.key}.json`;\r\n    }\r\n\r\n    const dataType = readResult.value.$dataType;\r\n    const arrayType = readResult.value.$arrayType;\r\n    const typeDefinition = readResult.references.HasTypeDefinition[0];\r\n\r\n    if (typeDefinition.value === VariableTypeDefinition.value) {\r\n      // Variable nodes are stored with their lowercase datatype as an extension\r\n      path += `.${extensionForDataType(dataType)}`;\r\n    } else if (typeDefinition.value === PropertyTypeDefinition.value) {\r\n      // Property nodes are stored with \".prop\" and their lowercase datatype as an extension\r\n      path += `.prop.${extensionForDataType(dataType)}`;\r\n    } else {\r\n      // Handle custom types\r\n      let identifier = 'var';\r\n      let fileExtension = false;\r\n      let keepExtension = false;\r\n\r\n      const atType = AtviseTypesByValue[typeDefinition.value];\r\n      if (atType) {\r\n        identifier = atType.identifier;\r\n        fileExtension = atType.fileExtension;\r\n        keepExtension = atType.keepExtension;\r\n      }\r\n\r\n      if (!keepExtension) {\r\n        path += `.${identifier}.${fileExtension || extensionForDataType(dataType)}`;\r\n      }\r\n    }\r\n\r\n    // Add \"array\" or \"matrix\" extensions for corresponding array types\r\n    if (arrayType.value !== VariantArrayType.Scalar.value) {\r\n      path += `.${arrayType === VariantArrayType.Array ? 'array' : 'matrix'}`;\r\n    }\r\n\r\n    return path;\r\n  }\r\n\r\n  /**\r\n   * Encodes a node's value to file contents.\r\n   * @param {*} value The value to encode.\r\n   * @param {node-opcua~DataType} dataType The {@link node-opcua~DataType} to encode the value for.\r\n   * @param {node-opcua~VariantArrayType} arrayType The files array type.\r\n   * @return {?Buffer} The encoded file contents or null.\r\n   */\r\n  static encodeValue(value, dataType, arrayType) {\r\n    if (value.value === null) {\r\n      return Buffer.from('');\r\n    }\r\n\r\n    const rawValue = getRawValue(value.value, dataType, arrayType);\r\n\r\n    if (rawValue instanceof Buffer) {\r\n      return rawValue;\r\n    }\r\n\r\n    const stringify = (a) => (a.toJSON ? a.toJSON() : JSON.stringify(a, null, '  '));\r\n    const stringified =\r\n      typeof rawValue === 'object' ? stringify(rawValue) : rawValue.toString().trim();\r\n\r\n    return Buffer.from(stringified);\r\n  }\r\n\r\n  /**\r\n   * Decodes a file's contents to a node's value.\r\n   * @param {Buffer} buffer The file contents to decode.\r\n   * @param {node-opcua~DataType} dataType The {@link node-opcua~DataType} to decode the contents.\r\n   * @param {node-opcua~VariantArrayType} arrayType The files array type.\r\n   * @return {?*} The decoded node value or null.\r\n   */\r\n  static decodeValue(buffer, dataType, arrayType) {\r\n    if (buffer === null || buffer.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    if (dataType === DataType.ByteString && arrayType === VariantArrayType.Scalar) {\r\n      return buffer;\r\n    }\r\n\r\n    const rawValue =\r\n      arrayType === VariantArrayType.Scalar\r\n        ? (decodeRawValue[dataType] || asIs)(buffer)\r\n        : JSON.parse(buffer.toString());\r\n\r\n    return getNodeValue(rawValue, dataType, arrayType);\r\n  }\r\n\r\n  /**\r\n   * As file mtimes do not support millisecond resolution these must be removed before storing\r\n   * files.\r\n   * @param {Date} date The original mtime.\r\n   * @return {Date} The normalized mtime.\r\n   */\r\n  static normalizeMtime(date) {\r\n    date.setMilliseconds(0);\r\n\r\n    return date;\r\n  }\r\n\r\n  /**\r\n   * Creates a new {@link AtviseFile} for the given {@link ReadStream.ReadResult}.\r\n   * @param {ReadStream.ReadResult} readResult The read result to create the file for.\r\n   * @return {AtviseFile} The resulting file.\r\n   */\r\n  static fromReadResult(readResult) {\r\n    const { nodeClass, references, value, mtime } = readResult;\r\n\r\n    if (nodeClass.value === NodeClass.Variable.value && !value) {\r\n      throw new Error('no value');\r\n    }\r\n\r\n    return new AtviseFile({\r\n      path: AtviseFile.pathForReadResult(readResult),\r\n      contents: value\r\n        ? AtviseFile.encodeValue(value, value.$dataType, value.$arrayType) // Variables\r\n        : Buffer.from(\r\n            JSON.stringify(\r\n              {\r\n                references: sortReferences(references),\r\n              },\r\n              null,\r\n              '  '\r\n            )\r\n          ), // Objects, types, ...\r\n      _nodeClass: nodeClass,\r\n      _dataType: value && value.$dataType,\r\n      _arrayType: value && value.$arrayType,\r\n      _references: references,\r\n      stat: { mtime: mtime ? this.normalizeMtime(mtime) : undefined },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Recalculates {@link AtviseFile#dataType}, {@link AtviseFile#arrayType} and\r\n   * {@link AtviseFile#typeDefinition}. **Never call this method directly.**.\r\n   */\r\n  _getMetadata() {\r\n    if (this.stem[0] === '.') {\r\n      // Got non-variable node\r\n      /**\r\n       * The node's class.\r\n       * @type {node-opcua~NodeClass}\r\n       */\r\n      this._nodeClass = NodeClass[this.stem.split('.')[1]];\r\n\r\n      const { references = {} } = JSON.parse(this.contents.toString());\r\n\r\n      /**\r\n       * References the node holds: In most cases this will be a single entry for\r\n       * `'HasTypeDefinition'`.\r\n       * @type {Map<String, NodeId[]>}\r\n       */\r\n      this._references = Object.entries(references).reduce(\r\n        (result, [type, refs]) =>\r\n          Object.assign(result, {\r\n            [type]: Array.isArray(refs) ? refs.map((v) => new NodeId(v)) : new NodeId(refs),\r\n          }),\r\n        {}\r\n      );\r\n\r\n      return;\r\n    }\r\n\r\n    this._nodeClass = NodeClass.Variable;\r\n\r\n    // Set default metadata\r\n    /**\r\n     * The node's stored {@link node-opcua~VariantArrayType}.\r\n     * @type {?node-opcua~VariantArrayType}\r\n     */\r\n    this._arrayType = VariantArrayType.Scalar;\r\n\r\n    this._references = {};\r\n\r\n    /**\r\n     * A node's browse- and display name.\r\n     * @type {?string}\r\n     */\r\n    this._name = this.stem.split('.')[0];\r\n\r\n    let extensions = [];\r\n    const m = this.relative.match(ExtensionRegExp);\r\n    if (m) {\r\n      extensions = m[1].split('.');\r\n    }\r\n\r\n    // For split files, add the directory name extension\r\n    const dirnameExts = this.dirname.split('.');\r\n    if (dirnameExts.length > 1) {\r\n      extensions.unshift(dirnameExts[dirnameExts.length - 1]);\r\n    }\r\n\r\n    function ifLastExtensionMatches(matches, fn) {\r\n      if (matches(extensions[extensions.length - 1])) {\r\n        fn(extensions.pop());\r\n      }\r\n    }\r\n\r\n    const complete = () =>\r\n      this._dataType !== undefined && this._references.HasTypeDefinition !== undefined;\r\n\r\n    // Handle array types\r\n    ifLastExtensionMatches(\r\n      (ext) => ext === 'array',\r\n      () => {\r\n        this._arrayType = VariantArrayType.Array;\r\n      }\r\n    );\r\n\r\n    ifLastExtensionMatches(\r\n      (ext) => ext === 'matrix',\r\n      () => {\r\n        this._arrayType = VariantArrayType.Matrix;\r\n      }\r\n    );\r\n\r\n    ifLastExtensionMatches(\r\n      (ext) => typeExtensions.includes(ext),\r\n      (ext) => {\r\n        /**\r\n         * The node's stored {@link node-opcua~DataType}.\r\n         * @type {?node-opcua~DataType}\r\n         */\r\n        this._dataType = DataType[types[typeExtensions.indexOf(ext)]];\r\n      }\r\n    );\r\n\r\n    // Handle wrapped data types (e.g. \"bool\" for DataType.Boolean)\r\n    ifLastExtensionMatches(\r\n      (ext) => DataTypeForExtension[ext],\r\n      (ext) => {\r\n        this._dataType = DataType[DataTypeForExtension[ext]];\r\n      }\r\n    );\r\n\r\n    if (extensions.length === 0) {\r\n      // Got variable\r\n      /**\r\n       * The node's stored type definition.\r\n       * @type {?node-opcua~NodeId}\r\n       */\r\n      this._references.HasTypeDefinition = [new NodeId(NodeId.NodeIdType.NUMERIC, 62, 0)];\r\n    }\r\n\r\n    ifLastExtensionMatches(\r\n      (ext) => ext === 'prop',\r\n      () => {\r\n        this._references.HasTypeDefinition = [new NodeId(NodeId.NodeIdType.NUMERIC, 68, 0)];\r\n        this._references.toParent = ReferenceTypeIds.HasProperty;\r\n      }\r\n    );\r\n\r\n    ifLastExtensionMatches(\r\n      (ext) => ext === 'var',\r\n      () => {\r\n        this._references.HasTypeDefinition = [new NodeId('Custom.VarResourceType')];\r\n      }\r\n    );\r\n\r\n    if (!complete()) {\r\n      // Handle atvise types\r\n      let foundAtType = false;\r\n\r\n      Object.entries(AtviseTypesByIdentifier).forEach(([identifier, type]) => {\r\n        if (!foundAtType && extensions.includes(identifier)) {\r\n          foundAtType = true;\r\n\r\n          if (!(type instanceof AtviseResourceType)) {\r\n            extensions = extensions.filter((e) => e !== identifier);\r\n          }\r\n\r\n          this._references.HasTypeDefinition = [type.typeDefinition];\r\n          this._dataType = type.dataType;\r\n        }\r\n      });\r\n    }\r\n\r\n    if (!complete()) {\r\n      this._references.HasTypeDefinition = [\r\n        new NodeId('VariableTypes.ATVISE.Resource.OctetStream'),\r\n      ];\r\n      this._dataType = DataType.ByteString;\r\n    }\r\n\r\n    this._name = [this._name, ...extensions.filter((e) => !dirnameExts.includes(e))].join('.');\r\n  }\r\n\r\n  /**\r\n   * Computes a file's metadata if needed.\r\n   * @return {AtviseFile} The file.\r\n   */\r\n  getMetadata() {\r\n    if (!this._nodeClass) {\r\n      this._getMetadata();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * The node's class.\r\n   * @type {node-opcua~NodeClass}\r\n   */\r\n  get nodeClass() {\r\n    if (!this._nodeClass) {\r\n      this._getMetadata();\r\n    }\r\n\r\n    return this._nodeClass;\r\n  }\r\n\r\n  /**\r\n   * The file's {@link node-opcua~DataType}.\r\n   * @type {node-opcua~DataType}\r\n   */\r\n  get dataType() {\r\n    if (!this._dataType) {\r\n      this._getMetadata();\r\n    }\r\n\r\n    return this._dataType;\r\n  }\r\n\r\n  /**\r\n   * The file's {@link node-opcua~VariantArrayType}.\r\n   * @type {node-opcua~VariantArrayType}\r\n   */\r\n  get arrayType() {\r\n    if (!this._arrayType) {\r\n      this._getMetadata();\r\n    }\r\n\r\n    return this._arrayType;\r\n  }\r\n\r\n  /**\r\n   * The files's references.\r\n   * @type {Map<string, NodeId|NodeId[]>}\r\n   */\r\n  get references() {\r\n    if (!this._references) {\r\n      this._getMetadata();\r\n    }\r\n\r\n    return this._references;\r\n  }\r\n\r\n  /**\r\n   * The file's type definition.\r\n   * @type {node-opcua~NodeId}\r\n   */\r\n  get typeDefinition() {\r\n    const refs = this.references;\r\n\r\n    if (refs && refs.HasTypeDefinition) {\r\n      return refs.HasTypeDefinition[0];\r\n    }\r\n\r\n    return new NodeId(NodeId.NodeIdType.NUMERIC, 0, 0);\r\n  }\r\n\r\n  // eslint-disable-next-line jsdoc/require-description-complete-sentence\r\n  /**\r\n   * `true` for reference config files (for example `.index.htm.json`).\r\n   * @type {boolean}\r\n   */\r\n  get isReferenceConfig() {\r\n    return this.stem[0] === '.' && !this.stem.match(ConfigFileRegexp);\r\n  }\r\n\r\n  /**\r\n   * `true` for files containing atvise displays.\r\n   * @type {boolean}\r\n   */\r\n  get isDisplay() {\r\n    return this.typeDefinition.value === 'VariableTypes.ATVISE.Display';\r\n  }\r\n\r\n  /**\r\n   * `true` for files containing atvise scripts.\r\n   * @type {boolean}\r\n   */\r\n  get isScript() {\r\n    return this.typeDefinition.value === 'VariableTypes.ATVISE.ScriptCode';\r\n  }\r\n\r\n  /**\r\n   * `true` for files containing atvise quick dynamics.\r\n   * @type {boolean}\r\n   */\r\n  get isQuickDynamic() {\r\n    return this.typeDefinition.value === 'VariableTypes.ATVISE.QuickDynamic';\r\n  }\r\n\r\n  /**\r\n   * Sets the node value for the file.\r\n   * @param {?*} newValue The value to set.\r\n   */\r\n  set value(newValue) {\r\n    /**\r\n     * The file's contents.\r\n     * @type {?Buffer}\r\n     */\r\n    this.contents = AtviseFile.encodeValue(newValue, this.dataType, this.arrayType);\r\n  }\r\n\r\n  /**\r\n   * Returns the decoded node value for the file.\r\n   * @type {?*} The file's decoded value.\r\n   */\r\n  get value() {\r\n    return AtviseFile.decodeValue(this.contents, this.dataType, this.arrayType);\r\n  }\r\n\r\n  /**\r\n   * Returns the decoded node value for create node serverscript.\r\n   * @type {?*} The file's decoded value.\r\n   */\r\n  get createNodeValue() {\r\n    const value = this.value;\r\n\r\n    if (this.dataType === DataType.DateTime) {\r\n      return value.valueOf();\r\n    }\r\n\r\n    if (value instanceof Buffer) {\r\n      return value.toString();\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Returns the node id associated with the file.\r\n   * @type {NodeId} The file's node id.\r\n   */\r\n  get nodeId() {\r\n    if (this.nodeClass.value !== NodeClass.Variable.value) {\r\n      return NodeId.fromFilePath(dirname(this.relative));\r\n    }\r\n    const atType = AtviseTypesByValue[this.typeDefinition.value];\r\n    let idPath = this.relative;\r\n\r\n    if (!atType || !atType.keepExtension) {\r\n      const exts = idPath.match(ExtensionRegExp)[1];\r\n      idPath = idPath.split(`.${exts}`)[0];\r\n    }\r\n\r\n    return NodeId.fromFilePath(idPath);\r\n  }\r\n\r\n  /**\r\n   * A file's browse and display name.\r\n   * @type {string}\r\n   */\r\n  get name() {\r\n    if (!this._name) {\r\n      this._getMetadata();\r\n    }\r\n\r\n    return this._name;\r\n  }\r\n\r\n  /**\r\n   * A file's parent's node id.\r\n   * @type {NodeId}\r\n   */\r\n  get parentNodeId() {\r\n    const name = this.name;\r\n    const id = this.nodeId;\r\n\r\n    if (name) {\r\n      const parts = this.nodeId.value.split(name);\r\n\r\n      if (parts.length > 1) {\r\n        return new NodeId(id.identifierType, parts[0].slice(0, -1), id.namespaceIndex);\r\n      }\r\n    }\r\n\r\n    return this.nodeId.parent;\r\n  }\r\n\r\n  /**\r\n   * Returns a new file with all attributes of the current file.\r\n   * @param {Object} options See the {@link vinyl~File} docs for all options available.\r\n   * @return {AtviseFile} The cloned file.\r\n   * @see https://github.com/gulpjs/vinyl#filecloneoptions\r\n   */\r\n  clone(options) {\r\n    const clonedFile = super.clone(options);\r\n\r\n    clonedFile._nodeClass = this._nodeClass;\r\n    clonedFile._dataType = this._dataType;\r\n    clonedFile._arrayType = this._arrayType;\r\n    clonedFile._references = this._references;\r\n\r\n    return clonedFile;\r\n  }\r\n\r\n  /**\r\n   * Creates a new AtviseFile and reads it's contents.\r\n   * @param {Object} options See {@link vinyl~File} for available options.\r\n   * @return {Promise} Resolved with the new file of rejected with the error that occured while\r\n   * trying to read it's path.\r\n   */\r\n  static read(options = {}) {\r\n    return new Promise((resolve, reject) => {\r\n      if (!options.path) {\r\n        reject(new Error('options.path is required'));\r\n      } else {\r\n        readFile(options.path, (err, contents) => {\r\n          if (err) {\r\n            reject(err);\r\n          } else {\r\n            resolve(new AtviseFile(Object.assign(options, { contents })));\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"mappings":";;;;;;AAAA,IAAAA,GAAA,GAAAC,OAAA;AACA,IAAAC,KAAA,GAAAD,OAAA;AACA,IAAAE,UAAA,GAAAF,OAAA;AACA,IAAAG,QAAA,GAAAH,OAAA;AACA,IAAAI,OAAA,GAAAJ,OAAA;AACA,IAAAK,eAAA,GAAAL,OAAA;AACA,IAAAM,kBAAA,GAAAN,OAAA;AACA,IAAAO,eAAA,GAAAP,OAAA;AACA,IAAAQ,UAAA,GAAAR,OAAA;AACA,IAAAS,eAAA,GAAAT,OAAA;AACA,IAAAU,gBAAA,GAAAV,OAAA;AACA,IAAAW,gBAAA,GAAAX,OAAA;AACA,IAAAY,MAAA,GAAAC,sBAAA,CAAAb,OAAA;AACA,IAAAc,OAAA,GAAAD,sBAAA,CAAAb,OAAA;AACA,IAAAe,OAAA,GAAAf,OAAA;AACA,IAAAgB,QAAA,GAAAhB,OAAA;AACA,IAAAiB,MAAA,GAAAC,uBAAA,CAAAlB,OAAA;AAA0D,SAAAkB,wBAAAC,CAAA,EAAAC,CAAA,6BAAAC,OAAA,MAAAC,CAAA,OAAAD,OAAA,IAAAE,CAAA,OAAAF,OAAA,YAAAH,uBAAA,YAAAA,CAAAC,CAAA,EAAAC,CAAA,SAAAA,CAAA,IAAAD,CAAA,IAAAA,CAAA,CAAAK,UAAA,SAAAL,CAAA,MAAAM,CAAA,EAAAC,CAAA,EAAAC,CAAA,KAAAC,SAAA,QAAAC,OAAA,EAAAV,CAAA,iBAAAA,CAAA,uBAAAA,CAAA,yBAAAA,CAAA,SAAAQ,CAAA,MAAAF,CAAA,GAAAL,CAAA,GAAAG,CAAA,GAAAD,CAAA,QAAAG,CAAA,CAAAK,GAAA,CAAAX,CAAA,UAAAM,CAAA,CAAAM,GAAA,CAAAZ,CAAA,GAAAM,CAAA,CAAAO,GAAA,CAAAb,CAAA,EAAAQ,CAAA,gBAAAP,CAAA,IAAAD,CAAA,gBAAAC,CAAA,OAAAa,cAAA,CAAAC,IAAA,CAAAf,CAAA,EAAAC,CAAA,OAAAM,CAAA,IAAAD,CAAA,GAAAU,MAAA,CAAAC,cAAA,KAAAD,MAAA,CAAAE,wBAAA,CAAAlB,CAAA,EAAAC,CAAA,OAAAM,CAAA,CAAAK,GAAA,IAAAL,CAAA,CAAAM,GAAA,IAAAP,CAAA,CAAAE,CAAA,EAAAP,CAAA,EAAAM,CAAA,IAAAC,CAAA,CAAAP,CAAA,IAAAD,CAAA,CAAAC,CAAA,WAAAO,CAAA,KAAAR,CAAA,EAAAC,CAAA;AAAA,SAAAP,uBAAAM,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAK,UAAA,GAAAL,CAAA,KAAAU,OAAA,EAAAV,CAAA;AAE1D;AACA;AACA;AACA;AACA,MAAMmB,kBAAkB,GAAGC,cAAW,CAACC,MAAM,CAC3C,CAACC,MAAM,EAAEC,IAAI,KACXP,MAAM,CAACQ,MAAM,CAACF,MAAM,EAAE;EACpB,CAACC,IAAI,CAACE,cAAc,CAACC,KAAK,GAAGH;AAC/B,CAAC,CAAC,EACJ,CAAC,CACH,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMI,uBAAuB,GAAGP,cAAW,CAACC,MAAM,CAChD,CAACC,MAAM,EAAEC,IAAI,KACXP,MAAM,CAACQ,MAAM,CAACF,MAAM,EAAE;EACpB,CAACC,IAAI,CAACK,UAAU,GAAGL;AACrB,CAAC,CAAC,EACJ,CAAC,CACH,CAAC;;AAED;AACA;AACA;AACA;AACO,MAAMM,oBAAoB,GAAAC,OAAA,CAAAD,oBAAA,GAAG;EAClC,CAACE,iBAAQ,CAACC,OAAO,GAAG,MAAM;EAC1B,CAACD,iBAAQ,CAACE,UAAU,GAAG;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACO,MAAMC,oBAAoB,GAAAJ,OAAA,CAAAI,oBAAA,GAAG,IAAAC,eAAO,EAACN,oBAAoB,CAAC;;AAEjE;AACA;AACA;AACA;AACA;AACA,MAAMO,KAAK,GAAGpB,MAAM,CAACqB,IAAI,CAACN,iBAAQ,CAAC;;AAEnC;AACA;AACA;AACA;AACA,MAAMO,cAAc,GAAGF,KAAK,CAACG,GAAG,CAAEtC,CAAC,IAAKA,CAAC,CAACuC,WAAW,CAAC,CAAC,CAAC;;AAExD;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,GAAG,IAAIC,eAAM,CAACA,eAAM,CAACC,UAAU,CAACC,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC;AAC3E;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,GAAG,IAAIH,eAAM,CAACA,eAAM,CAACC,UAAU,CAACC,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC;;AAE3E;AACA;AACA;AACA;AACA;AACA,MAAME,eAAe,GAAG,cAAc;;AAEtC;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAIC,CAAC,IAAKA,CAAC;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAGA,CAACV,GAAG,EAAEW,GAAG,EAAEC,GAAG,EAAEC,QAAQ,KAAK;EACjD,IAAIF,GAAG,CAACC,GAAG,CAAC,EAAE;IACZ,OAAOnC,MAAM,CAACQ,MAAM,CAAC0B,GAAG,EAAE;MACxB,CAACC,GAAG,GAAGZ,GAAG,CAACa,QAAQ,CAAC,CAACF,GAAG,CAACC,GAAG,CAAC;IAC/B,CAAC,CAAC;EACJ;EAEA,OAAOD,GAAG;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMG,UAAU,GAAG;EACjB,CAACtB,iBAAQ,CAACuB,IAAI,GAAG,MAAM,IAAI;EAC3B,CAACvB,iBAAQ,CAACwB,UAAU,GAAG,CAAC;IAAEC;EAAK,CAAC,KAAKA,IAAI;EACzC,CAACzB,iBAAQ,CAAC0B,aAAa,GAAG,CAAC;IAAEC,cAAc;IAAEF;EAAK,CAAC,MAAM;IAAEE,cAAc;IAAEF;EAAK,CAAC,CAAC;EAClF,CAACzB,iBAAQ,CAAC4B,aAAa,GAAG,CAAC;IAAEC,IAAI;IAAEC;EAAO,CAAC,MAAM;IAAED,IAAI;IAAEC;EAAO,CAAC,CAAC;EAClE,CAAC9B,iBAAQ,CAAC+B,SAAS,GAAIpC,KAAK,IAAK;IAC/B,MAAMqC,OAAO,GAAG,IAAAC,YAAI,EAACtC,KAAK,EAAE,CAC1B,OAAO,EACP,YAAY,EACZ,iBAAiB,EACjB,mBAAmB,EACnB,iBAAiB,EACjB,mBAAmB,CACpB,CAAC;IAEFuB,aAAa,CAACI,UAAU,EAAEU,OAAO,EAAE,OAAO,EAAEhC,iBAAQ,CAACkC,OAAO,CAAC;IAC7DhB,aAAa,CAACI,UAAU,EAAEU,OAAO,EAAE,YAAY,EAAEhC,iBAAQ,CAACwB,UAAU,CAAC;IACrE;;IAEA,OAAOQ,OAAO;EAChB,CAAC;EACD,CAAChC,iBAAQ,CAACkC,OAAO,GAAG,CAAC;IAAEb,QAAQ;IAAEc,SAAS;IAAExC,KAAK;IAAEyC;EAAW,CAAC,MAAM;IACnEf,QAAQ;IACRc,SAAS;IACT;IACAxC,KAAK,EAAE0C,WAAW,CAAC1C,KAAK,EAAE0B,QAAQ,EAAEc,SAAS,CAAC;IAC9CC;EACF,CAAC,CAAC;EACF,CAACpC,iBAAQ,CAACsC,cAAc,GAAIC,IAAI,IAAK;IACnC,MAAMP,OAAO,GAAG,IAAAC,YAAI,EAACM,IAAI,EAAE,CACzB,cAAc,EACd,YAAY,EACZ,QAAQ,EACR,eAAe,EACf,gBAAgB,EAChB,iBAAiB,EACjB,qBAAqB,CACtB,CAAC;IAEFrB,aAAa,CAACI,UAAU,EAAEU,OAAO,EAAE,iBAAiB,EAAEhC,iBAAQ,CAACwB,UAAU,CAAC;IAC1EN,aAAa,CAACI,UAAU,EAAEU,OAAO,EAAE,qBAAqB,EAAEhC,iBAAQ,CAACsC,cAAc,CAAC;IAElF,OAAON,OAAO;EAChB;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMQ,cAAc,GAAIvB,CAAC,IAAKA,CAAC,CAACwB,QAAQ,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;;AAEjD;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAI1B,CAAC,IAAK2B,QAAQ,CAACJ,cAAc,CAACvB,CAAC,CAAC,EAAE,EAAE,CAAC;;AAE1D;AACA;AACA;AACA;AACA;AACA,MAAM4B,aAAa,GAAI5B,CAAC,IAAK6B,UAAU,CAACN,cAAc,CAACvB,CAAC,CAAC,CAAC;;AAE1D;AACA;AACA;AACA;AACA;AACA,MAAM8B,YAAY,GAAI9B,CAAC,IAAK+B,IAAI,CAACC,KAAK,CAAChC,CAAC,CAACwB,QAAQ,CAAC,CAAC,CAAC;;AAEpD;AACA;AACA;AACA;AACA,MAAMS,cAAc,GAAG;EACrB,CAAClD,iBAAQ,CAACuB,IAAI,GAAG,MAAM,IAAI;EAC3B,CAACvB,iBAAQ,CAACC,OAAO,GAAIgB,CAAC,IAAKuB,cAAc,CAACvB,CAAC,CAAC,KAAK,MAAM;EACvD,CAACjB,iBAAQ,CAACmD,KAAK,GAAGR,WAAW;EAC7B,CAAC3C,iBAAQ,CAACoD,IAAI,GAAGT,WAAW;EAC5B,CAAC3C,iBAAQ,CAACqD,KAAK,GAAGV,WAAW;EAC7B,CAAC3C,iBAAQ,CAACsD,MAAM,GAAGX,WAAW;EAC9B,CAAC3C,iBAAQ,CAACuD,KAAK,GAAGZ,WAAW;EAC7B,CAAC3C,iBAAQ,CAACwD,MAAM,GAAGb,WAAW;EAC9B,CAAC3C,iBAAQ,CAACyD,KAAK,GAAGV,YAAY;EAC9B,CAAC/C,iBAAQ,CAAC0D,MAAM,GAAGX,YAAY;EAC/B,CAAC/C,iBAAQ,CAAC2D,KAAK,GAAGd,aAAa;EAC/B,CAAC7C,iBAAQ,CAAC4D,MAAM,GAAGf,aAAa;EAChC,CAAC7C,iBAAQ,CAAC6D,MAAM,GAAGrB,cAAc;EACjC,CAACxC,iBAAQ,CAAC8D,QAAQ,GAAGtB,cAAc;EACnC,CAACxC,iBAAQ,CAAC+D,IAAI,GAAGvB,cAAc;EAC/B;EACA,CAACxC,iBAAQ,CAACE,UAAU,GAAGsC,cAAc;EACrC,CAACxC,iBAAQ,CAACW,MAAM,GAAG6B,cAAc;EACjC,CAACxC,iBAAQ,CAACgE,cAAc,GAAGxB,cAAc;EACzC,CAACxC,iBAAQ,CAACwB,UAAU,GAAGgB,cAAc;EACrC,CAACxC,iBAAQ,CAAC0B,aAAa,GAAGqB,YAAY;EACtC,CAAC/C,iBAAQ,CAAC4B,aAAa,GAAGmB,YAAY;EACtC;EACA,CAAC/C,iBAAQ,CAAC+B,SAAS,GAAGgB,YAAY;EAClC,CAAC/C,iBAAQ,CAACkC,OAAO,GAAGa,YAAY;EAChC,CAAC/C,iBAAQ,CAACsC,cAAc,GAAGS;AAC7B,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMkB,WAAW,GAAG;EAClB,CAACjE,iBAAQ,CAAC8D,QAAQ,GAAII,CAAC,IAAK,IAAIC,IAAI,CAACD,CAAC,CAAC;EACvC,CAAClE,iBAAQ,CAACoE,UAAU,GAAInD,CAAC,IAAK;IAC5B,IAAIA,CAAC,YAAYoD,MAAM,EAAE;MACvB,OAAOpD,CAAC;IACV;IAEA,OAAOoD,MAAM,CAACC,IAAI,CAACrD,CAAC,CAACsD,IAAI,EAAE,QAAQ,CAAC;EACtC,CAAC;EACD,CAACvE,iBAAQ,CAACW,MAAM,GAAIuD,CAAC,IAAK,IAAAM,qBAAa,EAACN,CAAC,CAAC;EAE1C;EACA,CAAClE,iBAAQ,CAACgE,cAAc,GAAIE,CAAC,IAAK;IAChC,MAAMO,MAAM,GAAG,IAAAD,qBAAa,EAACN,CAAC,CAAC;IAC/B,MAAM,CAACvE,KAAK,EAAE,GAAG+E,IAAI,CAAC,GAAGD,MAAM,CAAC9E,KAAK,CAACgF,KAAK,CAAC,GAAG,CAAC;IAEhD,MAAM;MAAEC,cAAc;MAAEC,SAAS;MAAEC,YAAY;MAAEC;IAAY,CAAC,GAAGL,IAAI,CAACpF,MAAM,CAAC,CAAC0F,IAAI,EAAEC,GAAG,KAAK;MAC1F,MAAMC,KAAK,GAAGD,GAAG,CAACC,KAAK,CAAC,eAAe,CAAC;MACxC,IAAI,CAACA,KAAK,EAAE;QACV,OAAOF,IAAI;MACb;MAEA,IAAI,CAAC5D,GAAG,EAAE+D,GAAG,CAAC,GAAGD,KAAK,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;;MAEjC,IAAIhE,GAAG,KAAK,aAAa,EAAE;QACzB+D,GAAG,GAAGvC,QAAQ,CAACuC,GAAG,EAAE,EAAE,CAAC;MACzB;MAEA,OAAOlG,MAAM,CAACQ,MAAM,CAACuF,IAAI,EAAE;QAAE,CAAC5D,GAAG,GAAG+D;MAAI,CAAC,CAAC;IAC5C,CAAC,EAAElG,MAAM,CAACQ,MAAM,CAAC,CAAC,CAAC,EAAEgF,MAAM,CAAC,CAAC;IAE7B,OAAO,IAAIT,+BAAc,CAACY,cAAc,EAAEjF,KAAK,EAAEkF,SAAS,EAAEC,YAAY,EAAEC,WAAW,CAAC;EACxF,CAAC;EAED,CAAC/E,iBAAQ,CAACwB,UAAU,GAAIC,IAAI,IAAK4D,8BAAW,CAAC5D,IAAI,CAAC;EAClD,CAACzB,iBAAQ,CAAC0B,aAAa,GAAIM,OAAO,IAAK,IAAIN,6BAAa,CAACM,OAAO,CAAC;EACjE,CAAChC,iBAAQ,CAAC4B,aAAa,GAAII,OAAO,IAAK,IAAIJ,6BAAa,CAACI,OAAO,CAAC;EACjE,CAAChC,iBAAQ,CAAC+B,SAAS,GAAIC,OAAO,IAAK;IACjC,MAAMgD,IAAI,GAAGhD,OAAO;IAEpBd,aAAa,CAAC+C,WAAW,EAAEe,IAAI,EAAE,OAAO,EAAEhF,iBAAQ,CAACkC,OAAO,CAAC;IAC3DhB,aAAa,CAAC+C,WAAW,EAAEe,IAAI,EAAE,YAAY,EAAEhF,iBAAQ,CAACwB,UAAU,CAAC;IACnEN,aAAa,CAAC+C,WAAW,EAAEe,IAAI,EAAE,iBAAiB,EAAEhF,iBAAQ,CAAC8D,QAAQ,CAAC;IACtE5C,aAAa,CAAC+C,WAAW,EAAEe,IAAI,EAAE,iBAAiB,EAAEhF,iBAAQ,CAAC8D,QAAQ,CAAC;IAEtE,OAAO,IAAI/B,oBAAS,CAACiD,IAAI,CAAC;EAC5B,CAAC;EACD,CAAChF,iBAAQ,CAACkC,OAAO,GAAG,CAAC;IAAEb,QAAQ;IAAEc,SAAS;IAAExC,KAAK;IAAEyC;EAAW,CAAC,KAC7D,IAAIF,gBAAO,CAAC;IACVb,QAAQ;IACRc,SAAS,EAAEmD,yBAAgB,CAACnD,SAAS,CAAC;IACtCxC,KAAK;IACLyC;EACF,CAAC,CAAC;EACJ,CAACpC,iBAAQ,CAACsC,cAAc,GAAIN,OAAO,IAAK;IACtC,MAAMgD,IAAI,GAAGhD,OAAO;IAEpBd,aAAa,CAAC+C,WAAW,EAAEe,IAAI,EAAE,iBAAiB,EAAEhF,iBAAQ,CAACwB,UAAU,CAAC;IACxEN,aAAa,CAAC+C,WAAW,EAAEe,IAAI,EAAE,qBAAqB,EAAEhF,iBAAQ,CAACsC,cAAc,CAAC;IAEhF,OAAO,IAAIA,+BAAc,CAAC0C,IAAI,CAAC;EACjC;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM3C,WAAW,GAAGA,CAAC1C,KAAK,EAAE0B,QAAQ,EAAEc,SAAS,KAAK;EAClD,IAAIA,SAAS,CAACxC,KAAK,KAAK2F,yBAAgB,CAACC,MAAM,CAAC5F,KAAK,EAAE;IACrD,MAAM6F,KAAK,GAAGC,KAAK,CAACC,OAAO,CAAC/F,KAAK,CAAC,GAAGA,KAAK,GAAG8F,KAAK,CAACnB,IAAI,CAAC3E,KAAK,CAAC;IAE9D,OAAO6F,KAAK,CAAChF,GAAG,CAAE2E,GAAG,IAAK9C,WAAW,CAAC8C,GAAG,EAAE9D,QAAQ,EAAEiE,yBAAgB,CAACnD,SAAS,CAACxC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;EAC9F;EAEA,OAAO,CAAC2B,UAAU,CAACD,QAAQ,CAAC,IAAIL,IAAI,EAAErB,KAAK,CAAC;AAC9C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMgG,YAAY,GAAGA,CAACC,QAAQ,EAAEvE,QAAQ,EAAEc,SAAS,KAAK;EACtD,IAAIA,SAAS,CAACxC,KAAK,KAAK2F,yBAAgB,CAACC,MAAM,CAAC5F,KAAK,EAAE;IACrD,IAAI,CAAC8F,KAAK,CAACC,OAAO,CAACE,QAAQ,CAAC,EAAE;MAC5B,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1C;IAEA,OAAOD,QAAQ,CAACpF,GAAG,CAAEsF,GAAG,IACtBH,YAAY,CAACG,GAAG,EAAEzE,QAAQ,EAAEiE,yBAAgB,CAACnD,SAAS,CAACxC,KAAK,GAAG,CAAC,CAAC,CACnE,CAAC;EACH;EAEA,OAAO,CAACsE,WAAW,CAAC5C,QAAQ,CAAC,IAAIL,IAAI,EAAE4E,QAAQ,CAAC;AAClD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,oBAAoBA,CAAC1E,QAAQ,EAAE;EACtC,OAAOvB,oBAAoB,CAACuB,QAAQ,CAAC,IAAIA,QAAQ,CAACoB,QAAQ,CAAC,CAAC,CAAChC,WAAW,CAAC,CAAC;AAC5E;;AAEA;AACA;AACA;AACA;AACA,MAAMuF,gBAAgB,GAAG,uEAAuE;;AAEhG;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMC,UAAU,SAASC,cAAI,CAAC;EAC3C;AACF;AACA;AACA;EACE,OAAOC,iBAAiBA,CAACC,UAAU,EAAE;IACnC,IAAIC,IAAI,GAAGD,UAAU,CAAC3B,MAAM,CAAC6B,QAAQ;IAErC,IAAIF,UAAU,CAACG,SAAS,CAAC5G,KAAK,KAAK6G,oBAAS,CAACC,QAAQ,CAAC9G,KAAK,EAAE;MAC3D,OAAO,GAAG0G,IAAI,KAAKD,UAAU,CAACG,SAAS,CAACnF,GAAG,OAAO;IACpD;IAEA,MAAMC,QAAQ,GAAG+E,UAAU,CAACzG,KAAK,CAAC+G,SAAS;IAC3C,MAAMvE,SAAS,GAAGiE,UAAU,CAACzG,KAAK,CAACgH,UAAU;IAC7C,MAAMjH,cAAc,GAAG0G,UAAU,CAACQ,UAAU,CAACC,iBAAiB,CAAC,CAAC,CAAC;IAEjE,IAAInH,cAAc,CAACC,KAAK,KAAKe,sBAAsB,CAACf,KAAK,EAAE;MACzD;MACA0G,IAAI,IAAI,IAAIN,oBAAoB,CAAC1E,QAAQ,CAAC,EAAE;IAC9C,CAAC,MAAM,IAAI3B,cAAc,CAACC,KAAK,KAAKmB,sBAAsB,CAACnB,KAAK,EAAE;MAChE;MACA0G,IAAI,IAAI,SAASN,oBAAoB,CAAC1E,QAAQ,CAAC,EAAE;IACnD,CAAC,MAAM;MACL;MACA,IAAIxB,UAAU,GAAG,KAAK;MACtB,IAAIiH,aAAa,GAAG,KAAK;MACzB,IAAIC,aAAa,GAAG,KAAK;MAEzB,MAAMC,MAAM,GAAG5H,kBAAkB,CAACM,cAAc,CAACC,KAAK,CAAC;MACvD,IAAIqH,MAAM,EAAE;QACVnH,UAAU,GAAGmH,MAAM,CAACnH,UAAU;QAC9BiH,aAAa,GAAGE,MAAM,CAACF,aAAa;QACpCC,aAAa,GAAGC,MAAM,CAACD,aAAa;MACtC;MAEA,IAAI,CAACA,aAAa,EAAE;QAClBV,IAAI,IAAI,IAAIxG,UAAU,IAAIiH,aAAa,IAAIf,oBAAoB,CAAC1E,QAAQ,CAAC,EAAE;MAC7E;IACF;;IAEA;IACA,IAAIc,SAAS,CAACxC,KAAK,KAAK2F,yBAAgB,CAACC,MAAM,CAAC5F,KAAK,EAAE;MACrD0G,IAAI,IAAI,IAAIlE,SAAS,KAAKmD,yBAAgB,CAACG,KAAK,GAAG,OAAO,GAAG,QAAQ,EAAE;IACzE;IAEA,OAAOY,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,OAAOY,WAAWA,CAACtH,KAAK,EAAE0B,QAAQ,EAAEc,SAAS,EAAE;IAC7C,IAAIxC,KAAK,CAACA,KAAK,KAAK,IAAI,EAAE;MACxB,OAAO0E,MAAM,CAACC,IAAI,CAAC,EAAE,CAAC;IACxB;IAEA,MAAMsB,QAAQ,GAAGvD,WAAW,CAAC1C,KAAK,CAACA,KAAK,EAAE0B,QAAQ,EAAEc,SAAS,CAAC;IAE9D,IAAIyD,QAAQ,YAAYvB,MAAM,EAAE;MAC9B,OAAOuB,QAAQ;IACjB;IAEA,MAAMsB,SAAS,GAAIC,CAAC,IAAMA,CAAC,CAACC,MAAM,GAAGD,CAAC,CAACC,MAAM,CAAC,CAAC,GAAGpE,IAAI,CAACkE,SAAS,CAACC,CAAC,EAAE,IAAI,EAAE,IAAI,CAAE;IAChF,MAAME,WAAW,GACf,OAAOzB,QAAQ,KAAK,QAAQ,GAAGsB,SAAS,CAACtB,QAAQ,CAAC,GAAGA,QAAQ,CAACnD,QAAQ,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;IAEjF,OAAO2B,MAAM,CAACC,IAAI,CAAC+C,WAAW,CAAC;EACjC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,WAAWA,CAACC,MAAM,EAAElG,QAAQ,EAAEc,SAAS,EAAE;IAC9C,IAAIoF,MAAM,KAAK,IAAI,IAAIA,MAAM,CAACC,MAAM,KAAK,CAAC,EAAE;MAC1C,OAAO,IAAI;IACb;IAEA,IAAInG,QAAQ,KAAKrB,iBAAQ,CAACoE,UAAU,IAAIjC,SAAS,KAAKmD,yBAAgB,CAACC,MAAM,EAAE;MAC7E,OAAOgC,MAAM;IACf;IAEA,MAAM3B,QAAQ,GACZzD,SAAS,KAAKmD,yBAAgB,CAACC,MAAM,GACjC,CAACrC,cAAc,CAAC7B,QAAQ,CAAC,IAAIL,IAAI,EAAEuG,MAAM,CAAC,GAC1CvE,IAAI,CAACC,KAAK,CAACsE,MAAM,CAAC9E,QAAQ,CAAC,CAAC,CAAC;IAEnC,OAAOkD,YAAY,CAACC,QAAQ,EAAEvE,QAAQ,EAAEc,SAAS,CAAC;EACpD;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,OAAOsF,cAAcA,CAACC,IAAI,EAAE;IAC1BA,IAAI,CAACC,eAAe,CAAC,CAAC,CAAC;IAEvB,OAAOD,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;EACE,OAAOE,cAAcA,CAACxB,UAAU,EAAE;IAChC,MAAM;MAAEG,SAAS;MAAEK,UAAU;MAAEjH,KAAK;MAAEkI;IAAM,CAAC,GAAGzB,UAAU;IAE1D,IAAIG,SAAS,CAAC5G,KAAK,KAAK6G,oBAAS,CAACC,QAAQ,CAAC9G,KAAK,IAAI,CAACA,KAAK,EAAE;MAC1D,MAAM,IAAIkG,KAAK,CAAC,UAAU,CAAC;IAC7B;IAEA,OAAO,IAAII,UAAU,CAAC;MACpBI,IAAI,EAAEJ,UAAU,CAACE,iBAAiB,CAACC,UAAU,CAAC;MAC9C0B,QAAQ,EAAEnI,KAAK,GACXsG,UAAU,CAACgB,WAAW,CAACtH,KAAK,EAAEA,KAAK,CAAC+G,SAAS,EAAE/G,KAAK,CAACgH,UAAU,CAAC,CAAC;MAAA,EACjEtC,MAAM,CAACC,IAAI,CACTtB,IAAI,CAACkE,SAAS,CACZ;QACEN,UAAU,EAAE,IAAAmB,uBAAc,EAACnB,UAAU;MACvC,CAAC,EACD,IAAI,EACJ,IACF,CACF,CAAC;MAAE;MACPoB,UAAU,EAAEzB,SAAS;MACrB0B,SAAS,EAAEtI,KAAK,IAAIA,KAAK,CAAC+G,SAAS;MACnCwB,UAAU,EAAEvI,KAAK,IAAIA,KAAK,CAACgH,UAAU;MACrCwB,WAAW,EAAEvB,UAAU;MACvBwB,IAAI,EAAE;QAAEP,KAAK,EAAEA,KAAK,GAAG,IAAI,CAACJ,cAAc,CAACI,KAAK,CAAC,GAAGQ;MAAU;IAChE,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;EACEC,YAAYA,CAAA,EAAG;IACb,IAAI,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MACxB;MACA;AACN;AACA;AACA;MACM,IAAI,CAACP,UAAU,GAAGxB,oBAAS,CAAC,IAAI,CAAC+B,IAAI,CAAC5D,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MAEpD,MAAM;QAAEiC,UAAU,GAAG,CAAC;MAAE,CAAC,GAAG5D,IAAI,CAACC,KAAK,CAAC,IAAI,CAAC6E,QAAQ,CAACrF,QAAQ,CAAC,CAAC,CAAC;;MAEhE;AACN;AACA;AACA;AACA;MACM,IAAI,CAAC0F,WAAW,GAAGlJ,MAAM,CAACuJ,OAAO,CAAC5B,UAAU,CAAC,CAACtH,MAAM,CAClD,CAACC,MAAM,EAAE,CAACC,IAAI,EAAEiJ,IAAI,CAAC,KACnBxJ,MAAM,CAACQ,MAAM,CAACF,MAAM,EAAE;QACpB,CAACC,IAAI,GAAGiG,KAAK,CAACC,OAAO,CAAC+C,IAAI,CAAC,GAAGA,IAAI,CAACjI,GAAG,CAAEkI,CAAC,IAAK,IAAI/H,eAAM,CAAC+H,CAAC,CAAC,CAAC,GAAG,IAAI/H,eAAM,CAAC8H,IAAI;MAChF,CAAC,CAAC,EACJ,CAAC,CACH,CAAC;MAED;IACF;IAEA,IAAI,CAACT,UAAU,GAAGxB,oBAAS,CAACC,QAAQ;;IAEpC;IACA;AACJ;AACA;AACA;IACI,IAAI,CAACyB,UAAU,GAAG5C,yBAAgB,CAACC,MAAM;IAEzC,IAAI,CAAC4C,WAAW,GAAG,CAAC,CAAC;;IAErB;AACJ;AACA;AACA;IACI,IAAI,CAACQ,KAAK,GAAG,IAAI,CAACJ,IAAI,CAAC5D,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAEpC,IAAIiE,UAAU,GAAG,EAAE;IACnB,MAAMC,CAAC,GAAG,IAAI,CAACC,QAAQ,CAAC5D,KAAK,CAACnE,eAAe,CAAC;IAC9C,IAAI8H,CAAC,EAAE;MACLD,UAAU,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAClE,KAAK,CAAC,GAAG,CAAC;IAC9B;;IAEA;IACA,MAAMoE,WAAW,GAAG,IAAI,CAACC,OAAO,CAACrE,KAAK,CAAC,GAAG,CAAC;IAC3C,IAAIoE,WAAW,CAACvB,MAAM,GAAG,CAAC,EAAE;MAC1BoB,UAAU,CAACK,OAAO,CAACF,WAAW,CAACA,WAAW,CAACvB,MAAM,GAAG,CAAC,CAAC,CAAC;IACzD;IAEA,SAAS0B,sBAAsBA,CAACC,OAAO,EAAEC,EAAE,EAAE;MAC3C,IAAID,OAAO,CAACP,UAAU,CAACA,UAAU,CAACpB,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE;QAC9C4B,EAAE,CAACR,UAAU,CAACS,GAAG,CAAC,CAAC,CAAC;MACtB;IACF;IAEA,MAAMC,QAAQ,GAAGA,CAAA,KACf,IAAI,CAACrB,SAAS,KAAKI,SAAS,IAAI,IAAI,CAACF,WAAW,CAACtB,iBAAiB,KAAKwB,SAAS;;IAElF;IACAa,sBAAsB,CACnBK,GAAG,IAAKA,GAAG,KAAK,OAAO,EACxB,MAAM;MACJ,IAAI,CAACrB,UAAU,GAAG5C,yBAAgB,CAACG,KAAK;IAC1C,CACF,CAAC;IAEDyD,sBAAsB,CACnBK,GAAG,IAAKA,GAAG,KAAK,QAAQ,EACzB,MAAM;MACJ,IAAI,CAACrB,UAAU,GAAG5C,yBAAgB,CAACkE,MAAM;IAC3C,CACF,CAAC;IAEDN,sBAAsB,CACnBK,GAAG,IAAKhJ,cAAc,CAACkJ,QAAQ,CAACF,GAAG,CAAC,EACpCA,GAAG,IAAK;MACP;AACR;AACA;AACA;MACQ,IAAI,CAACtB,SAAS,GAAGjI,iBAAQ,CAACK,KAAK,CAACE,cAAc,CAACmJ,OAAO,CAACH,GAAG,CAAC,CAAC,CAAC;IAC/D,CACF,CAAC;;IAED;IACAL,sBAAsB,CACnBK,GAAG,IAAKpJ,oBAAoB,CAACoJ,GAAG,CAAC,EACjCA,GAAG,IAAK;MACP,IAAI,CAACtB,SAAS,GAAGjI,iBAAQ,CAACG,oBAAoB,CAACoJ,GAAG,CAAC,CAAC;IACtD,CACF,CAAC;IAED,IAAIX,UAAU,CAACpB,MAAM,KAAK,CAAC,EAAE;MAC3B;MACA;AACN;AACA;AACA;MACM,IAAI,CAACW,WAAW,CAACtB,iBAAiB,GAAG,CAAC,IAAIlG,eAAM,CAACA,eAAM,CAACC,UAAU,CAACC,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;IACrF;IAEAqI,sBAAsB,CACnBK,GAAG,IAAKA,GAAG,KAAK,MAAM,EACvB,MAAM;MACJ,IAAI,CAACpB,WAAW,CAACtB,iBAAiB,GAAG,CAAC,IAAIlG,eAAM,CAACA,eAAM,CAACC,UAAU,CAACC,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;MACnF,IAAI,CAACsH,WAAW,CAACwB,QAAQ,GAAGC,gCAAgB,CAACC,WAAW;IAC1D,CACF,CAAC;IAEDX,sBAAsB,CACnBK,GAAG,IAAKA,GAAG,KAAK,KAAK,EACtB,MAAM;MACJ,IAAI,CAACpB,WAAW,CAACtB,iBAAiB,GAAG,CAAC,IAAIlG,eAAM,CAAC,wBAAwB,CAAC,CAAC;IAC7E,CACF,CAAC;IAED,IAAI,CAAC2I,QAAQ,CAAC,CAAC,EAAE;MACf;MACA,IAAIQ,WAAW,GAAG,KAAK;MAEvB7K,MAAM,CAACuJ,OAAO,CAAC5I,uBAAuB,CAAC,CAACmK,OAAO,CAAC,CAAC,CAAClK,UAAU,EAAEL,IAAI,CAAC,KAAK;QACtE,IAAI,CAACsK,WAAW,IAAIlB,UAAU,CAACa,QAAQ,CAAC5J,UAAU,CAAC,EAAE;UACnDiK,WAAW,GAAG,IAAI;UAElB,IAAI,EAAEtK,IAAI,YAAYwK,yBAAkB,CAAC,EAAE;YACzCpB,UAAU,GAAGA,UAAU,CAACqB,MAAM,CAAEhM,CAAC,IAAKA,CAAC,KAAK4B,UAAU,CAAC;UACzD;UAEA,IAAI,CAACsI,WAAW,CAACtB,iBAAiB,GAAG,CAACrH,IAAI,CAACE,cAAc,CAAC;UAC1D,IAAI,CAACuI,SAAS,GAAGzI,IAAI,CAAC6B,QAAQ;QAChC;MACF,CAAC,CAAC;IACJ;IAEA,IAAI,CAACiI,QAAQ,CAAC,CAAC,EAAE;MACf,IAAI,CAACnB,WAAW,CAACtB,iBAAiB,GAAG,CACnC,IAAIlG,eAAM,CAAC,2CAA2C,CAAC,CACxD;MACD,IAAI,CAACsH,SAAS,GAAGjI,iBAAQ,CAACoE,UAAU;IACtC;IAEA,IAAI,CAACuE,KAAK,GAAG,CAAC,IAAI,CAACA,KAAK,EAAE,GAAGC,UAAU,CAACqB,MAAM,CAAEhM,CAAC,IAAK,CAAC8K,WAAW,CAACU,QAAQ,CAACxL,CAAC,CAAC,CAAC,CAAC,CAACiM,IAAI,CAAC,GAAG,CAAC;EAC5F;;EAEA;AACF;AACA;AACA;EACEC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAAC,IAAI,CAACnC,UAAU,EAAE;MACpB,IAAI,CAACM,YAAY,CAAC,CAAC;IACrB;IAEA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;EACE,IAAI/B,SAASA,CAAA,EAAG;IACd,IAAI,CAAC,IAAI,CAACyB,UAAU,EAAE;MACpB,IAAI,CAACM,YAAY,CAAC,CAAC;IACrB;IAEA,OAAO,IAAI,CAACN,UAAU;EACxB;;EAEA;AACF;AACA;AACA;EACE,IAAI3G,QAAQA,CAAA,EAAG;IACb,IAAI,CAAC,IAAI,CAAC4G,SAAS,EAAE;MACnB,IAAI,CAACK,YAAY,CAAC,CAAC;IACrB;IAEA,OAAO,IAAI,CAACL,SAAS;EACvB;;EAEA;AACF;AACA;AACA;EACE,IAAI9F,SAASA,CAAA,EAAG;IACd,IAAI,CAAC,IAAI,CAAC+F,UAAU,EAAE;MACpB,IAAI,CAACI,YAAY,CAAC,CAAC;IACrB;IAEA,OAAO,IAAI,CAACJ,UAAU;EACxB;;EAEA;AACF;AACA;AACA;EACE,IAAItB,UAAUA,CAAA,EAAG;IACf,IAAI,CAAC,IAAI,CAACuB,WAAW,EAAE;MACrB,IAAI,CAACG,YAAY,CAAC,CAAC;IACrB;IAEA,OAAO,IAAI,CAACH,WAAW;EACzB;;EAEA;AACF;AACA;AACA;EACE,IAAIzI,cAAcA,CAAA,EAAG;IACnB,MAAM+I,IAAI,GAAG,IAAI,CAAC7B,UAAU;IAE5B,IAAI6B,IAAI,IAAIA,IAAI,CAAC5B,iBAAiB,EAAE;MAClC,OAAO4B,IAAI,CAAC5B,iBAAiB,CAAC,CAAC,CAAC;IAClC;IAEA,OAAO,IAAIlG,eAAM,CAACA,eAAM,CAACC,UAAU,CAACC,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;EACpD;;EAEA;EACA;AACF;AACA;AACA;EACE,IAAIuJ,iBAAiBA,CAAA,EAAG;IACtB,OAAO,IAAI,CAAC7B,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAACA,IAAI,CAACrD,KAAK,CAACc,gBAAgB,CAAC;EACnE;;EAEA;AACF;AACA;AACA;EACE,IAAIqE,SAASA,CAAA,EAAG;IACd,OAAO,IAAI,CAAC3K,cAAc,CAACC,KAAK,KAAK,8BAA8B;EACrE;;EAEA;AACF;AACA;AACA;EACE,IAAI2K,QAAQA,CAAA,EAAG;IACb,OAAO,IAAI,CAAC5K,cAAc,CAACC,KAAK,KAAK,iCAAiC;EACxE;;EAEA;AACF;AACA;AACA;EACE,IAAI4K,cAAcA,CAAA,EAAG;IACnB,OAAO,IAAI,CAAC7K,cAAc,CAACC,KAAK,KAAK,mCAAmC;EAC1E;;EAEA;AACF;AACA;AACA;EACE,IAAIA,KAAKA,CAAC6K,QAAQ,EAAE;IAClB;AACJ;AACA;AACA;IACI,IAAI,CAAC1C,QAAQ,GAAG7B,UAAU,CAACgB,WAAW,CAACuD,QAAQ,EAAE,IAAI,CAACnJ,QAAQ,EAAE,IAAI,CAACc,SAAS,CAAC;EACjF;;EAEA;AACF;AACA;AACA;EACE,IAAIxC,KAAKA,CAAA,EAAG;IACV,OAAOsG,UAAU,CAACqB,WAAW,CAAC,IAAI,CAACQ,QAAQ,EAAE,IAAI,CAACzG,QAAQ,EAAE,IAAI,CAACc,SAAS,CAAC;EAC7E;;EAEA;AACF;AACA;AACA;EACE,IAAIsI,eAAeA,CAAA,EAAG;IACpB,MAAM9K,KAAK,GAAG,IAAI,CAACA,KAAK;IAExB,IAAI,IAAI,CAAC0B,QAAQ,KAAKrB,iBAAQ,CAAC8D,QAAQ,EAAE;MACvC,OAAOnE,KAAK,CAAC+K,OAAO,CAAC,CAAC;IACxB;IAEA,IAAI/K,KAAK,YAAY0E,MAAM,EAAE;MAC3B,OAAO1E,KAAK,CAAC8C,QAAQ,CAAC,CAAC;IACzB;IAEA,OAAO9C,KAAK;EACd;;EAEA;AACF;AACA;AACA;EACE,IAAI8E,MAAMA,CAAA,EAAG;IACX,IAAI,IAAI,CAAC8B,SAAS,CAAC5G,KAAK,KAAK6G,oBAAS,CAACC,QAAQ,CAAC9G,KAAK,EAAE;MACrD,OAAOgB,eAAM,CAACgK,YAAY,CAAC,IAAA3B,aAAO,EAAC,IAAI,CAACF,QAAQ,CAAC,CAAC;IACpD;IACA,MAAM9B,MAAM,GAAG5H,kBAAkB,CAAC,IAAI,CAACM,cAAc,CAACC,KAAK,CAAC;IAC5D,IAAIiL,MAAM,GAAG,IAAI,CAAC9B,QAAQ;IAE1B,IAAI,CAAC9B,MAAM,IAAI,CAACA,MAAM,CAACD,aAAa,EAAE;MACpC,MAAM8D,IAAI,GAAGD,MAAM,CAAC1F,KAAK,CAACnE,eAAe,CAAC,CAAC,CAAC,CAAC;MAC7C6J,MAAM,GAAGA,MAAM,CAACjG,KAAK,CAAC,IAAIkG,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IACtC;IAEA,OAAOlK,eAAM,CAACgK,YAAY,CAACC,MAAM,CAAC;EACpC;;EAEA;AACF;AACA;AACA;EACE,IAAInJ,IAAIA,CAAA,EAAG;IACT,IAAI,CAAC,IAAI,CAACkH,KAAK,EAAE;MACf,IAAI,CAACL,YAAY,CAAC,CAAC;IACrB;IAEA,OAAO,IAAI,CAACK,KAAK;EACnB;;EAEA;AACF;AACA;AACA;EACE,IAAImC,YAAYA,CAAA,EAAG;IACjB,MAAMrJ,IAAI,GAAG,IAAI,CAACA,IAAI;IACtB,MAAMsJ,EAAE,GAAG,IAAI,CAACtG,MAAM;IAEtB,IAAIhD,IAAI,EAAE;MACR,MAAMuJ,KAAK,GAAG,IAAI,CAACvG,MAAM,CAAC9E,KAAK,CAACgF,KAAK,CAAClD,IAAI,CAAC;MAE3C,IAAIuJ,KAAK,CAACxD,MAAM,GAAG,CAAC,EAAE;QACpB,OAAO,IAAI7G,eAAM,CAACoK,EAAE,CAACnG,cAAc,EAAEoG,KAAK,CAAC,CAAC,CAAC,CAAC5F,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE2F,EAAE,CAACpJ,cAAc,CAAC;MAChF;IACF;IAEA,OAAO,IAAI,CAAC8C,MAAM,CAACwG,MAAM;EAC3B;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,KAAKA,CAAClJ,OAAO,EAAE;IACb,MAAMmJ,UAAU,GAAG,KAAK,CAACD,KAAK,CAAClJ,OAAO,CAAC;IAEvCmJ,UAAU,CAACnD,UAAU,GAAG,IAAI,CAACA,UAAU;IACvCmD,UAAU,CAAClD,SAAS,GAAG,IAAI,CAACA,SAAS;IACrCkD,UAAU,CAACjD,UAAU,GAAG,IAAI,CAACA,UAAU;IACvCiD,UAAU,CAAChD,WAAW,GAAG,IAAI,CAACA,WAAW;IAEzC,OAAOgD,UAAU;EACnB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,OAAOC,IAAIA,CAACpJ,OAAO,GAAG,CAAC,CAAC,EAAE;IACxB,OAAO,IAAIqJ,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,IAAI,CAACvJ,OAAO,CAACqE,IAAI,EAAE;QACjBkF,MAAM,CAAC,IAAI1F,KAAK,CAAC,0BAA0B,CAAC,CAAC;MAC/C,CAAC,MAAM;QACL,IAAA2F,YAAQ,EAACxJ,OAAO,CAACqE,IAAI,EAAE,CAACoF,GAAG,EAAE3D,QAAQ,KAAK;UACxC,IAAI2D,GAAG,EAAE;YACPF,MAAM,CAACE,GAAG,CAAC;UACb,CAAC,MAAM;YACLH,OAAO,CAAC,IAAIrF,UAAU,CAAChH,MAAM,CAACQ,MAAM,CAACuC,OAAO,EAAE;cAAE8F;YAAS,CAAC,CAAC,CAAC,CAAC;UAC/D;QACF,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ;AACF;AAAC/H,OAAA,CAAApB,OAAA,GAAAsH,UAAA","ignoreList":[]}