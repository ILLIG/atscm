{"version":3,"file":"QueueStream.js","names":["_opcua_status_code","require","_gulplog","_interopRequireDefault","_Stream","e","__esModule","default","QueueStream","Stream","constructor","options","maxParallel","Object","assign","highWaterMark","_processing","_processed","_queued","_maxParallel","_start","Date","getTime","on","queueEmpty","_processChunk","shift","emit","hasPending","length","processed","opsPerSecond","processErrorMessage","chunk","Error","processChunk","handleErrors","err","statusCode","onSuccess","finished","error","message","process","env","CONTINUE_ON_FAILURE","Logger","StatusCodes","Good","description","_enqueueChunk","push","_transform","enc","callback","session","once","_flush","exports"],"sources":["../../../src/lib/server/QueueStream.js"],"sourcesContent":["/* Needed as long as https://github.com/gajus/eslint-plugin-jsdoc/issues/56 is open */\r\n/* eslint-disable jsdoc/check-param-names */\r\n\r\nimport { StatusCodes } from 'node-opcua/lib/datamodel/opcua_status_code';\r\nimport Logger from 'gulplog';\r\nimport Stream from './Stream';\r\n\r\n/**\r\n * A stream that process atvise server requests in parallel.\r\n * @abstract\r\n */\r\nexport default class QueueStream extends Stream {\r\n  /**\r\n   * Creates a new QueueStream with the given options.\r\n   * @param {Object} [options] The options to use.\r\n   * @param {number} [options.maxParallel] The maximum of parallel tasks to execute.\r\n   */\r\n  constructor(options = {}) {\r\n    const maxParallel = options.maxParallel || 250;\r\n    super(Object.assign(options, { highWaterMark: maxParallel }));\r\n\r\n    /**\r\n     * The number of running operations.\r\n     * @type {Number}\r\n     */\r\n    this._processing = 0;\r\n\r\n    /**\r\n     * The number of chunks processed so far.\r\n     * @type {Number}\r\n     */\r\n    this._processed = 0;\r\n\r\n    /**\r\n     * The queued chunks.\r\n     * @type {*[]}\r\n     */\r\n    this._queued = [];\r\n\r\n    /**\r\n     * The maximum of parallel tasks to execute\r\n     * @type {number}\r\n     */\r\n    this._maxParallel = maxParallel;\r\n\r\n    /**\r\n     * The timestamp of the date when the stream was created.\r\n     * @type {Number}\r\n     */\r\n    this._start = new Date().getTime();\r\n\r\n    this.on('processed-chunk', () => {\r\n      if (!this.queueEmpty) {\r\n        this._processChunk(this._queued.shift());\r\n      } else if (this._processing === 0) {\r\n        this.emit('drained');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * `true` if there are queued operations or an operation is running right now.\r\n   * @type {boolean}\r\n   */\r\n  get hasPending() {\r\n    return this._processing > 0 || this._queued.length > 0;\r\n  }\r\n\r\n  /**\r\n   * `true` if there are no queued operations.\r\n   * @type {boolean}\r\n   */\r\n  get queueEmpty() {\r\n    return this._queued.length === 0;\r\n  }\r\n\r\n  /**\r\n   * The number of chunks already processed.\r\n   * @type {number}\r\n   */\r\n  get processed() {\r\n    return this._processed;\r\n  }\r\n\r\n  /**\r\n   * The number of processed chunks per second.\r\n   * @type {number}\r\n   */\r\n  get opsPerSecond() {\r\n    return this._processed / ((new Date().getTime() - this._start) / 1000) || 0;\r\n  }\r\n\r\n  /**\r\n   * The error message to use when processing a chunk fails. **Must be overridden by all\r\n   * subclasses!**.\r\n   * @param {*} chunk The chunk being processed.\r\n   * @return {string} The error message to use.\r\n   * @abstract\r\n   */\r\n  // eslint-disable-next-line no-unused-vars\r\n  processErrorMessage(chunk) {\r\n    throw new Error('QueueStream#processErrorMessage must be implemented by all subclasses');\r\n  }\r\n\r\n  /**\r\n   * The function to call when a chunk is ready to be processed. **Must be overridden by all\r\n   * subclasses.**.\r\n   * @param {*} chunk The chunk to process.\r\n   * @param {function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)}\r\n   * handleErrors Call this function to handle errors and bad status codes. When no error occured\r\n   * and the status code received is fine, `onSuccess` is called. Further processing of valid\r\n   * chunks, for example Recursions should happen in `onSuccess`. **Note that `onSuccess` is an\r\n   * asynchronous function with a callback as an argument.**.\r\n   * @example <caption>Basic implementation</caption>\r\n   * class MyQueueStream extends QueueStream {\r\n   *   ...\r\n   *   processChunk(chunk, handle) {\r\n   *     client.session.doSomething((err, result, statusCode) => handle(err, statusCode, done => {\r\n   *       // This is called if err is falsy and status code is node-opcua~StatusCodes.Good\r\n   *       doSomethingWith(result);\r\n   *       done();\r\n   *     }));\r\n   *   }\r\n   *   ...\r\n   * }\r\n   * @example <caption>Implement a recursion</caption>\r\n   * class RecursiveQueueStream extends QueueStream {\r\n   *   ...\r\n   *   processChunk(chunk, handle) {\r\n   *     client.session.doSomething((err, result, statusCode) => handle(err, statusCode, done => {\r\n   *       // Write the result back to the stream.\r\n   *       // This means, that `result` will be queued and, as soon as possible, #processChunk will\r\n   *       // be called with `result` as the `chunk` argument.\r\n   *       this.write(result, null, done);\r\n   *     }));\r\n   *   }\r\n   *   ...\r\n   * }\r\n   * @example <caption>Allowing some invalid status codes</caption>\r\n   * import { StatusCodes } from 'node-opcua';\r\n   *\r\n   * class FriendlyQueueStream extends QueueStream {\r\n   *   ...\r\n   *   processChunk(chunk, handle) {\r\n   *     client.session.doSomething((err, result, statusCode) => {\r\n   *       if (statusCode === StatusCodes.BadUserAccessDenied) {\r\n   *         Logger.warn(`Ignored invalid status: ${statusCode.description}`);\r\n   *         handle(err, StatusCodes.Good, done => done());\r\n   *       } else {\r\n   *         handle(err, statusCode, done => done());\r\n   *       }\r\n   *     });\r\n   *   }\r\n   *   ...\r\n   * }\r\n   * @abstract\r\n   */\r\n  processChunk(chunk, handleErrors) {\r\n    // eslint-disable-line no-unused-vars\r\n    handleErrors(new Error('QueueStream#processChunk must be implemented by all subclasses'));\r\n  }\r\n\r\n  /**\r\n   * Calls {@link QueueStream#processChunk} and handles errors and invalid status codes.\r\n   * @param {*} chunk The chunk to process.\r\n   * @emits {*} Emits a `processed-chunk` event once a chunk was processed.\r\n   */\r\n  _processChunk(chunk) {\r\n    this._processing++;\r\n\r\n    this.processChunk(chunk, (err, statusCode, onSuccess) => {\r\n      const finished = (error) => {\r\n        this._processing--;\r\n        this._processed++;\r\n        this.emit('processed-chunk', chunk, error);\r\n      };\r\n\r\n      let error = err;\r\n\r\n      if (err) {\r\n        const message = `${this.processErrorMessage(chunk)}: ${err.message}`;\r\n\r\n        if (process.env.CONTINUE_ON_FAILURE === 'true') {\r\n          Logger.error(`FAILURE: ${message}`);\r\n        } else {\r\n          this.emit('error', Object.assign(err, { message }));\r\n        }\r\n      } else if (statusCode !== StatusCodes.Good) {\r\n        const message = `${this.processErrorMessage(chunk)}: ${statusCode.description}`;\r\n        error = new Error(message);\r\n\r\n        if (process.env.CONTINUE_ON_FAILURE === 'true') {\r\n          Logger.error(`FAILURE: ${message}`);\r\n        } else {\r\n          this.emit('error', new Error(message));\r\n        }\r\n      } else {\r\n        onSuccess(finished);\r\n        return;\r\n      }\r\n\r\n      finished(error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Enqueues the given chunk for processing.\r\n   * @param {*} chunk The chunk to enqueue.\r\n   */\r\n  _enqueueChunk(chunk) {\r\n    if (this._processing < this._maxParallel) {\r\n      this._processChunk(chunk);\r\n    } else {\r\n      this._queued.push(chunk);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calls {@link QueueStream#_enqueueChunk} as soon as the stream's session is opened.\r\n   * @param {*} chunk The chunk to transform.\r\n   * @param {string} enc The encoding used.\r\n   * @param {Function} callback Called once the chunk has been enqueued.\r\n   */\r\n  _transform(chunk, enc, callback) {\r\n    if (this.session) {\r\n      this._enqueueChunk(chunk);\r\n      callback();\r\n    } else {\r\n      this.once('session-open', () => {\r\n        this._enqueueChunk(chunk);\r\n        callback();\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Waits for pending operations to complete.\r\n   * @param {Function} callback Called once all queued chunks have been processed.\r\n   */\r\n  _flush(callback) {\r\n    if (this.hasPending) {\r\n      this.once('drained', () => {\r\n        super._flush(callback);\r\n      });\r\n    } else {\r\n      super._flush(callback);\r\n    }\r\n  }\r\n}\r\n"],"mappings":";;;;;;AAGA,IAAAA,kBAAA,GAAAC,OAAA;AACA,IAAAC,QAAA,GAAAC,sBAAA,CAAAF,OAAA;AACA,IAAAG,OAAA,GAAAD,sBAAA,CAAAF,OAAA;AAA8B,SAAAE,uBAAAE,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAL9B;AACA;;AAMA;AACA;AACA;AACA;AACe,MAAMG,WAAW,SAASC,eAAM,CAAC;EAC9C;AACF;AACA;AACA;AACA;EACEC,WAAWA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;IACxB,MAAMC,WAAW,GAAGD,OAAO,CAACC,WAAW,IAAI,GAAG;IAC9C,KAAK,CAACC,MAAM,CAACC,MAAM,CAACH,OAAO,EAAE;MAAEI,aAAa,EAAEH;IAAY,CAAC,CAAC,CAAC;;IAE7D;AACJ;AACA;AACA;IACI,IAAI,CAACI,WAAW,GAAG,CAAC;;IAEpB;AACJ;AACA;AACA;IACI,IAAI,CAACC,UAAU,GAAG,CAAC;;IAEnB;AACJ;AACA;AACA;IACI,IAAI,CAACC,OAAO,GAAG,EAAE;;IAEjB;AACJ;AACA;AACA;IACI,IAAI,CAACC,YAAY,GAAGP,WAAW;;IAE/B;AACJ;AACA;AACA;IACI,IAAI,CAACQ,MAAM,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;IAElC,IAAI,CAACC,EAAE,CAAC,iBAAiB,EAAE,MAAM;MAC/B,IAAI,CAAC,IAAI,CAACC,UAAU,EAAE;QACpB,IAAI,CAACC,aAAa,CAAC,IAAI,CAACP,OAAO,CAACQ,KAAK,CAAC,CAAC,CAAC;MAC1C,CAAC,MAAM,IAAI,IAAI,CAACV,WAAW,KAAK,CAAC,EAAE;QACjC,IAAI,CAACW,IAAI,CAAC,SAAS,CAAC;MACtB;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;EACE,IAAIC,UAAUA,CAAA,EAAG;IACf,OAAO,IAAI,CAACZ,WAAW,GAAG,CAAC,IAAI,IAAI,CAACE,OAAO,CAACW,MAAM,GAAG,CAAC;EACxD;;EAEA;AACF;AACA;AACA;EACE,IAAIL,UAAUA,CAAA,EAAG;IACf,OAAO,IAAI,CAACN,OAAO,CAACW,MAAM,KAAK,CAAC;EAClC;;EAEA;AACF;AACA;AACA;EACE,IAAIC,SAASA,CAAA,EAAG;IACd,OAAO,IAAI,CAACb,UAAU;EACxB;;EAEA;AACF;AACA;AACA;EACE,IAAIc,YAAYA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACd,UAAU,IAAI,CAAC,IAAII,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,GAAG,IAAI,CAACF,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC;EAC7E;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE;EACAY,mBAAmBA,CAACC,KAAK,EAAE;IACzB,MAAM,IAAIC,KAAK,CAAC,uEAAuE,CAAC;EAC1F;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,YAAYA,CAACF,KAAK,EAAEG,YAAY,EAAE;IAChC;IACAA,YAAY,CAAC,IAAIF,KAAK,CAAC,gEAAgE,CAAC,CAAC;EAC3F;;EAEA;AACF;AACA;AACA;AACA;EACET,aAAaA,CAACQ,KAAK,EAAE;IACnB,IAAI,CAACjB,WAAW,EAAE;IAElB,IAAI,CAACmB,YAAY,CAACF,KAAK,EAAE,CAACI,GAAG,EAAEC,UAAU,EAAEC,SAAS,KAAK;MACvD,MAAMC,QAAQ,GAAIC,KAAK,IAAK;QAC1B,IAAI,CAACzB,WAAW,EAAE;QAClB,IAAI,CAACC,UAAU,EAAE;QACjB,IAAI,CAACU,IAAI,CAAC,iBAAiB,EAAEM,KAAK,EAAEQ,KAAK,CAAC;MAC5C,CAAC;MAED,IAAIA,KAAK,GAAGJ,GAAG;MAEf,IAAIA,GAAG,EAAE;QACP,MAAMK,OAAO,GAAG,GAAG,IAAI,CAACV,mBAAmB,CAACC,KAAK,CAAC,KAAKI,GAAG,CAACK,OAAO,EAAE;QAEpE,IAAIC,OAAO,CAACC,GAAG,CAACC,mBAAmB,KAAK,MAAM,EAAE;UAC9CC,gBAAM,CAACL,KAAK,CAAC,YAAYC,OAAO,EAAE,CAAC;QACrC,CAAC,MAAM;UACL,IAAI,CAACf,IAAI,CAAC,OAAO,EAAEd,MAAM,CAACC,MAAM,CAACuB,GAAG,EAAE;YAAEK;UAAQ,CAAC,CAAC,CAAC;QACrD;MACF,CAAC,MAAM,IAAIJ,UAAU,KAAKS,8BAAW,CAACC,IAAI,EAAE;QAC1C,MAAMN,OAAO,GAAG,GAAG,IAAI,CAACV,mBAAmB,CAACC,KAAK,CAAC,KAAKK,UAAU,CAACW,WAAW,EAAE;QAC/ER,KAAK,GAAG,IAAIP,KAAK,CAACQ,OAAO,CAAC;QAE1B,IAAIC,OAAO,CAACC,GAAG,CAACC,mBAAmB,KAAK,MAAM,EAAE;UAC9CC,gBAAM,CAACL,KAAK,CAAC,YAAYC,OAAO,EAAE,CAAC;QACrC,CAAC,MAAM;UACL,IAAI,CAACf,IAAI,CAAC,OAAO,EAAE,IAAIO,KAAK,CAACQ,OAAO,CAAC,CAAC;QACxC;MACF,CAAC,MAAM;QACLH,SAAS,CAACC,QAAQ,CAAC;QACnB;MACF;MAEAA,QAAQ,CAACC,KAAK,CAAC;IACjB,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;EACES,aAAaA,CAACjB,KAAK,EAAE;IACnB,IAAI,IAAI,CAACjB,WAAW,GAAG,IAAI,CAACG,YAAY,EAAE;MACxC,IAAI,CAACM,aAAa,CAACQ,KAAK,CAAC;IAC3B,CAAC,MAAM;MACL,IAAI,CAACf,OAAO,CAACiC,IAAI,CAAClB,KAAK,CAAC;IAC1B;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEmB,UAAUA,CAACnB,KAAK,EAAEoB,GAAG,EAAEC,QAAQ,EAAE;IAC/B,IAAI,IAAI,CAACC,OAAO,EAAE;MAChB,IAAI,CAACL,aAAa,CAACjB,KAAK,CAAC;MACzBqB,QAAQ,CAAC,CAAC;IACZ,CAAC,MAAM;MACL,IAAI,CAACE,IAAI,CAAC,cAAc,EAAE,MAAM;QAC9B,IAAI,CAACN,aAAa,CAACjB,KAAK,CAAC;QACzBqB,QAAQ,CAAC,CAAC;MACZ,CAAC,CAAC;IACJ;EACF;;EAEA;AACF;AACA;AACA;EACEG,MAAMA,CAACH,QAAQ,EAAE;IACf,IAAI,IAAI,CAAC1B,UAAU,EAAE;MACnB,IAAI,CAAC4B,IAAI,CAAC,SAAS,EAAE,MAAM;QACzB,KAAK,CAACC,MAAM,CAACH,QAAQ,CAAC;MACxB,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,KAAK,CAACG,MAAM,CAACH,QAAQ,CAAC;IACxB;EACF;AACF;AAACI,OAAA,CAAAnD,OAAA,GAAAC,WAAA","ignoreList":[]}