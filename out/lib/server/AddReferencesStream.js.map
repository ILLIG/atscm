{"version":3,"file":"AddReferencesStream.js","names":["_variant","require","_opcua_status_code","_NodeId","_interopRequireDefault","_Node","_Atviseproject","_CallScriptStream","_WaitingStream","e","__esModule","default","serverNodes","Set","Atviseproject","ServerRelatedNodes","map","id","value","ignoredReferences","ReferenceTypeIds","toParent","HasTypeDefinition","HasModellingRule","AddReferencesStream","waitForDependencies","CallScriptStream","constructor","options","_retry","referencesToAdd","file","additionalReferences","Object","assign","references","dependenciesFor","refs","values","reduce","deps","nodes","concat","filter","has","scriptId","NodeId","NodeIdType","STRING","scriptParameters","result","key","s","referenceKeys","keys","length","paramObjString","dataType","DataType","String","JSON","stringify","nodeId","type","referenceIdValue","parseInt","items","processErrorMessage","handleOutputArguments","outArgs","callback","StatusCodes","Good","Error","failures","retryKey","delete","join","add","once","write","exports"],"sources":["../../../src/lib/server/AddReferencesStream.js"],"sourcesContent":["import { DataType } from 'node-opcua/lib/datamodel/variant';\r\nimport { StatusCodes } from 'node-opcua/lib/datamodel/opcua_status_code';\r\nimport NodeId from '../model/opcua/NodeId';\r\nimport { ReferenceTypeIds } from '../model/Node';\r\nimport Atviseproject from '../config/Atviseproject';\r\nimport CallScriptStream from './scripts/CallScriptStream';\r\nimport { waitForDependencies } from './WaitingStream';\r\n\r\nconst serverNodes = new Set(Atviseproject.ServerRelatedNodes.map((id) => id.value));\r\n\r\nconst ignoredReferences = new Set([\r\n  ReferenceTypeIds.toParent,\r\n  ReferenceTypeIds.HasTypeDefinition,\r\n  ReferenceTypeIds.HasModellingRule,\r\n]);\r\n\r\n/**\r\n * A stream that adds non-standard references to nodes when pushed.\r\n */\r\nexport default class AddReferencesStream extends waitForDependencies(CallScriptStream) {\r\n  /**\r\n   * Creates a new stream for adding references to pushed nodes.\r\n   * @param {Object} options The options to pass to the {@link CallScriptStream}.\r\n   */\r\n  constructor(options) {\r\n    super(options);\r\n\r\n    /**\r\n     * A stack of {@link NodeId#value}s to be retried afterwards.\r\n     * @type {Set<string>}\r\n     */\r\n    this._retry = new Set();\r\n  }\r\n\r\n  /**\r\n   * Returns the references that need to be set for a file.\r\n   * @param {AtviseFile} file The file to check.\r\n   * @return {Object} The files's references.\r\n   */\r\n  referencesToAdd(file) {\r\n    const additionalReferences = Object.assign({}, file.references);\r\n    delete additionalReferences.toParent;\r\n    delete additionalReferences.HasTypeDefinition;\r\n    delete additionalReferences.HasModellingRule;\r\n\r\n    return additionalReferences;\r\n  }\r\n\r\n  /**\r\n   * Returns the referenced nodes that should be processed before the given file.\r\n   * @param {AtviseFile} file The file to check.\r\n   * @return {NodeId[]} The files dependencies.\r\n   */\r\n  dependenciesFor(file) {\r\n    const refs = this.referencesToAdd(file);\r\n\r\n    return Object.values(refs)\r\n      .reduce((deps, nodes) => deps.concat(nodes), [])\r\n      .filter(({ value }) => !serverNodes.has(value));\r\n  }\r\n\r\n  /**\r\n   * Id of the *CreateNode* script added with `atscm import`.\r\n   * @type {NodeId}\r\n   */\r\n  get scriptId() {\r\n    return new NodeId(\r\n      NodeId.NodeIdType.STRING,\r\n      'SYSTEM.LIBRARY.ATVISE.SERVERSCRIPTS.atscm.AddReferences',\r\n      1\r\n    );\r\n  }\r\n\r\n  /**\r\n   * The options required to add references to the node for the given file.\r\n   * @param {AtviseFile} file The processed file.\r\n   * @return {Object} The options passed to the *AddReferences* script.\r\n   */\r\n  scriptParameters(file) {\r\n    const references = [...file.references].reduce((result, [key, value]) => {\r\n      if (ignoredReferences.has(key)) {\r\n        return result;\r\n      }\r\n\r\n      return Object.assign(result, {\r\n        [key]: [...value].map((s) => (typeof s === 'string' ? `ns=1;s=${s}` : s)),\r\n      });\r\n    }, {});\r\n\r\n    const referenceKeys = Object.keys(references);\r\n\r\n    if (referenceKeys.length > 0) {\r\n      return {\r\n        paramObjString: {\r\n          dataType: DataType.String,\r\n          value: JSON.stringify({\r\n            nodeId: file.nodeId,\r\n            references: referenceKeys.map((type) => ({\r\n              referenceIdValue: parseInt(type, 10),\r\n              items: references[type],\r\n            })),\r\n          }),\r\n        },\r\n      };\r\n    }\r\n\r\n    // No need to add references\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Prints an error message telling that adding one or more references failed.\r\n   * @param {AtviseFile} file The file who's node could not be created.\r\n   * @return {string} The resulting error message.\r\n   */\r\n  processErrorMessage(file) {\r\n    return `Error adding references to node ${file.nodeId}`;\r\n  }\r\n\r\n  /**\r\n   * Handles the results of a script call.\r\n   * @param {AtviseFile} file The file the script was called with.\r\n   * @param {node-opcua~Variant[]} outArgs The raw method results.\r\n   * @param {function(err: Error)} callback Called once finished.\r\n   */\r\n  handleOutputArguments(file, outArgs, callback) {\r\n    if (outArgs[0].value !== StatusCodes.Good) {\r\n      callback(new Error(outArgs[1].value));\r\n    } else {\r\n      const [{ value: failures }] = outArgs[3].value;\r\n\r\n      if (failures && failures.length) {\r\n        const retryKey = file.nodeId.value;\r\n\r\n        if (this._retry.has(retryKey)) {\r\n          this._retry.delete(retryKey);\r\n          callback(new Error(`Failed to create references to ${failures.join(', ')}`));\r\n        } else {\r\n          this._retry.add(retryKey);\r\n          callback(null);\r\n\r\n          this.once('drained', () => {\r\n            this.write(file);\r\n          });\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      callback(null);\r\n    }\r\n  }\r\n}\r\n"],"mappings":";;;;;;AAAA,IAAAA,QAAA,GAAAC,OAAA;AACA,IAAAC,kBAAA,GAAAD,OAAA;AACA,IAAAE,OAAA,GAAAC,sBAAA,CAAAH,OAAA;AACA,IAAAI,KAAA,GAAAJ,OAAA;AACA,IAAAK,cAAA,GAAAF,sBAAA,CAAAH,OAAA;AACA,IAAAM,iBAAA,GAAAH,sBAAA,CAAAH,OAAA;AACA,IAAAO,cAAA,GAAAP,OAAA;AAAsD,SAAAG,uBAAAK,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAEtD,MAAMG,WAAW,GAAG,IAAIC,GAAG,CAACC,sBAAa,CAACC,kBAAkB,CAACC,GAAG,CAAEC,EAAE,IAAKA,EAAE,CAACC,KAAK,CAAC,CAAC;AAEnF,MAAMC,iBAAiB,GAAG,IAAIN,GAAG,CAAC,CAChCO,sBAAgB,CAACC,QAAQ,EACzBD,sBAAgB,CAACE,iBAAiB,EAClCF,sBAAgB,CAACG,gBAAgB,CAClC,CAAC;;AAEF;AACA;AACA;AACe,MAAMC,mBAAmB,SAAS,IAAAC,kCAAmB,EAACC,yBAAgB,CAAC,CAAC;EACrF;AACF;AACA;AACA;EACEC,WAAWA,CAACC,OAAO,EAAE;IACnB,KAAK,CAACA,OAAO,CAAC;;IAEd;AACJ;AACA;AACA;IACI,IAAI,CAACC,MAAM,GAAG,IAAIhB,GAAG,CAAC,CAAC;EACzB;;EAEA;AACF;AACA;AACA;AACA;EACEiB,eAAeA,CAACC,IAAI,EAAE;IACpB,MAAMC,oBAAoB,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEH,IAAI,CAACI,UAAU,CAAC;IAC/D,OAAOH,oBAAoB,CAACX,QAAQ;IACpC,OAAOW,oBAAoB,CAACV,iBAAiB;IAC7C,OAAOU,oBAAoB,CAACT,gBAAgB;IAE5C,OAAOS,oBAAoB;EAC7B;;EAEA;AACF;AACA;AACA;AACA;EACEI,eAAeA,CAACL,IAAI,EAAE;IACpB,MAAMM,IAAI,GAAG,IAAI,CAACP,eAAe,CAACC,IAAI,CAAC;IAEvC,OAAOE,MAAM,CAACK,MAAM,CAACD,IAAI,CAAC,CACvBE,MAAM,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAKD,IAAI,CAACE,MAAM,CAACD,KAAK,CAAC,EAAE,EAAE,CAAC,CAC/CE,MAAM,CAAC,CAAC;MAAEzB;IAAM,CAAC,KAAK,CAACN,WAAW,CAACgC,GAAG,CAAC1B,KAAK,CAAC,CAAC;EACnD;;EAEA;AACF;AACA;AACA;EACE,IAAI2B,QAAQA,CAAA,EAAG;IACb,OAAO,IAAIC,eAAM,CACfA,eAAM,CAACC,UAAU,CAACC,MAAM,EACxB,yDAAyD,EACzD,CACF,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;EACEC,gBAAgBA,CAAClB,IAAI,EAAE;IACrB,MAAMI,UAAU,GAAG,CAAC,GAAGJ,IAAI,CAACI,UAAU,CAAC,CAACI,MAAM,CAAC,CAACW,MAAM,EAAE,CAACC,GAAG,EAAEjC,KAAK,CAAC,KAAK;MACvE,IAAIC,iBAAiB,CAACyB,GAAG,CAACO,GAAG,CAAC,EAAE;QAC9B,OAAOD,MAAM;MACf;MAEA,OAAOjB,MAAM,CAACC,MAAM,CAACgB,MAAM,EAAE;QAC3B,CAACC,GAAG,GAAG,CAAC,GAAGjC,KAAK,CAAC,CAACF,GAAG,CAAEoC,CAAC,IAAM,OAAOA,CAAC,KAAK,QAAQ,GAAG,UAAUA,CAAC,EAAE,GAAGA,CAAE;MAC1E,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,CAAC,CAAC;IAEN,MAAMC,aAAa,GAAGpB,MAAM,CAACqB,IAAI,CAACnB,UAAU,CAAC;IAE7C,IAAIkB,aAAa,CAACE,MAAM,GAAG,CAAC,EAAE;MAC5B,OAAO;QACLC,cAAc,EAAE;UACdC,QAAQ,EAAEC,iBAAQ,CAACC,MAAM;UACzBzC,KAAK,EAAE0C,IAAI,CAACC,SAAS,CAAC;YACpBC,MAAM,EAAE/B,IAAI,CAAC+B,MAAM;YACnB3B,UAAU,EAAEkB,aAAa,CAACrC,GAAG,CAAE+C,IAAI,KAAM;cACvCC,gBAAgB,EAAEC,QAAQ,CAACF,IAAI,EAAE,EAAE,CAAC;cACpCG,KAAK,EAAE/B,UAAU,CAAC4B,IAAI;YACxB,CAAC,CAAC;UACJ,CAAC;QACH;MACF,CAAC;IACH;;IAEA;IACA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;EACEI,mBAAmBA,CAACpC,IAAI,EAAE;IACxB,OAAO,mCAAmCA,IAAI,CAAC+B,MAAM,EAAE;EACzD;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEM,qBAAqBA,CAACrC,IAAI,EAAEsC,OAAO,EAAEC,QAAQ,EAAE;IAC7C,IAAID,OAAO,CAAC,CAAC,CAAC,CAACnD,KAAK,KAAKqD,8BAAW,CAACC,IAAI,EAAE;MACzCF,QAAQ,CAAC,IAAIG,KAAK,CAACJ,OAAO,CAAC,CAAC,CAAC,CAACnD,KAAK,CAAC,CAAC;IACvC,CAAC,MAAM;MACL,MAAM,CAAC;QAAEA,KAAK,EAAEwD;MAAS,CAAC,CAAC,GAAGL,OAAO,CAAC,CAAC,CAAC,CAACnD,KAAK;MAE9C,IAAIwD,QAAQ,IAAIA,QAAQ,CAACnB,MAAM,EAAE;QAC/B,MAAMoB,QAAQ,GAAG5C,IAAI,CAAC+B,MAAM,CAAC5C,KAAK;QAElC,IAAI,IAAI,CAACW,MAAM,CAACe,GAAG,CAAC+B,QAAQ,CAAC,EAAE;UAC7B,IAAI,CAAC9C,MAAM,CAAC+C,MAAM,CAACD,QAAQ,CAAC;UAC5BL,QAAQ,CAAC,IAAIG,KAAK,CAAC,kCAAkCC,QAAQ,CAACG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC9E,CAAC,MAAM;UACL,IAAI,CAAChD,MAAM,CAACiD,GAAG,CAACH,QAAQ,CAAC;UACzBL,QAAQ,CAAC,IAAI,CAAC;UAEd,IAAI,CAACS,IAAI,CAAC,SAAS,EAAE,MAAM;YACzB,IAAI,CAACC,KAAK,CAACjD,IAAI,CAAC;UAClB,CAAC,CAAC;QACJ;QAEA;MACF;MAEAuC,QAAQ,CAAC,IAAI,CAAC;IAChB;EACF;AACF;AAACW,OAAA,CAAAtE,OAAA,GAAAa,mBAAA","ignoreList":[]}