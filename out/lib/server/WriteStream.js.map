{"version":3,"file":"WriteStream.js","names":["_gulplog","_interopRequireDefault","require","_opcua_status_code","_nodeclass","_WaitingStream","e","__esModule","default","WriteStream","WaitingStream","constructor","createStream","addReferencesStream","options","_createCallbacks","on","nodeId","key","toString","_addReferencesStream","processErrorMessage","file","_createNode","handleErrors","err","StatusCodes","Good","done","push","dependenciesFor","processChunk","nodeClass","value","NodeClass","Variable","session","writeSingleNode","variantValue","statusCode","BadUserAccessDenied","BadNotWritable","Logger","warn","BadNodeIdUnknown","debug","exports"],"sources":["../../../src/lib/server/WriteStream.js"],"sourcesContent":["/* Needed as long as https://github.com/gajus/eslint-plugin-jsdoc/issues/56 is open */\r\n/* eslint-disable jsdoc/check-param-names */\r\n\r\nimport Logger from 'gulplog';\r\nimport { StatusCodes } from 'node-opcua/lib/datamodel/opcua_status_code';\r\nimport { NodeClass } from 'node-opcua/lib/datamodel/nodeclass';\r\nimport WaitingStream from './WaitingStream';\r\n\r\n// FIXME: Extend QueueStream directly\r\n\r\n/**\r\n * A stream that writes all read {@link AtviseFile}s to their corresponding nodes on atvise server.\r\n * The underlying {@link TreeStream} ensures the nodes are processed in an order that respects the\r\n * parent-child relations between nodes. Nodes are created (if needed) before their children are\r\n * processed.\r\n */\r\nexport default class WriteStream extends WaitingStream {\r\n  /**\r\n   * Creates a new write stream with the given {@link CreateNodeStream} and\r\n   * {@link AddReferencesStream}. Implementer have to ensure this create stream is actually piped.\r\n   * @param {CreateNodeStream} createStream The stream that handles node creations.\r\n   * @param {AddReferencesStream} addReferencesStream The stream that adds missing node references.\r\n   * @param {Object} options The options passed to the underlying {@link TreeStream}.\r\n   */\r\n  constructor(createStream, addReferencesStream, options) {\r\n    super(options);\r\n\r\n    /**\r\n     * If a node has to be created first, it's callback is added to this map.\r\n     * @type {Map<String, function(err: Error)}\r\n     */\r\n    this._createCallbacks = {};\r\n\r\n    createStream.on('processed-chunk', ({ nodeId }) => {\r\n      const key = nodeId.toString();\r\n\r\n      if (this._createCallbacks[key]) {\r\n        this._createCallbacks[key](null);\r\n      }\r\n    });\r\n\r\n    /**\r\n     * The stream responsible for adding additional references.\r\n     * @type {AddReferencesStream}\r\n     */\r\n    this._addReferencesStream = addReferencesStream;\r\n  }\r\n\r\n  /**\r\n   * The error message to use when writing a file fails.\r\n   * @param {AtviseFile} file The file being processed.\r\n   * @return {string} The error message to use.\r\n   */\r\n  processErrorMessage(file) {\r\n    return `Error writing ${file.nodeId}`;\r\n  }\r\n\r\n  /**\r\n   * Pushes a node to the piped create stream and waits for the node to be created.\r\n   * @param {AtviseFile} file The file create the node for.\r\n   * @param {function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)}\r\n   * handleErrors The error handler to call. See {@link QueueStream#processChunk} for details.\r\n   */\r\n  _createNode(file, handleErrors) {\r\n    this._createCallbacks[file.nodeId.toString()] = (err) => {\r\n      handleErrors(err, StatusCodes.Good, (done) => done());\r\n    };\r\n\r\n    this.push(file);\r\n  }\r\n\r\n  /**\r\n   * Returns a files parent node and type definition.\r\n   * @param {AtviseFile} file The file to check.\r\n   * @return {NodeId[]} The files dependencies.\r\n   */\r\n  dependenciesFor() {\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Writes an {@link AtviseFile} to it's corresponding node on atvise server.\r\n   * @param {AtviseFile} file The file to write.\r\n   * @param {function(err: Error, statusCode: node-opcua~StatusCodes, onSuccess: function)}\r\n   * handleErrors The error handler to call. See {@link QueueStream#processChunk} for details.\r\n   */\r\n  processChunk(file, handleErrors) {\r\n    if (file.nodeClass.value !== NodeClass.Variable.value) {\r\n      // Non-variable nodes are just pushed\r\n      this._createNode(file, handleErrors);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.session.writeSingleNode(\r\n        `ns=1;s=${file.nodeId}`,\r\n        file.variantValue,\r\n        (err, statusCode) => {\r\n          if (\r\n            statusCode === StatusCodes.BadUserAccessDenied ||\r\n            statusCode === StatusCodes.BadNotWritable\r\n          ) {\r\n            Logger.warn(`Error writing node ${file.nodeId}\r\n  - Make sure it is not opened in atvise builder\r\n  - Make sure the corresponding datasource is connected`);\r\n            handleErrors(err, StatusCodes.Good, (done) => done());\r\n          } else if (statusCode === StatusCodes.BadNodeIdUnknown) {\r\n            Logger.debug(`Node ${file.nodeId} does not exist: Attempting to create it...`);\r\n\r\n            this._createNode(file, handleErrors);\r\n          } else {\r\n            handleErrors(err, statusCode, (done) => {\r\n              // Push to add references stream\r\n              this._addReferencesStream.push(file);\r\n\r\n              done();\r\n            });\r\n          }\r\n        }\r\n      );\r\n    } catch (e) {\r\n      handleErrors(e);\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}