{"version":3,"file":"NodeId.js","names":["_path","require","_nodeOpcua","Type","OpcNodeId","NodeIdType","TypeForIdentifier","i","NUMERIC","s","STRING","g","GUID","b","BYTESTRING","possibleResourceChildNodes","Set","NodeId","constructor","typeOrValue","value","namespace","m","match","Number","isNaN","parseInt","n","t","v","fromFilePath","path","separator","split","sep","reduce","result","current","index","components","next","replace","has","filePath","parts","join","_lastSeparator","identifierType","indexOf","parent","parentValue","substr","lastIndexOf","isChildOf","prefix","postfix","length","browseName","inspect","depth","options","stylize","exports","default"],"sources":["../../../../src/lib/model/opcua/NodeId.js"],"sourcesContent":["import { sep } from 'path';\r\nimport { NodeId as OpcNodeId } from 'node-opcua';\r\n\r\n/**\r\n * OPC-UA node id types.\r\n * @type {Map<String, node-opcua~NodeIdType>}\r\n */\r\nconst Type = OpcNodeId.NodeIdType;\r\n\r\n/**\r\n * OPC-UA node id types mapped against node-id identifiers (e.g. i, s ...).\r\n * @type {Map<String, node-opcua~NodeIdType>}\r\n */\r\nconst TypeForIdentifier = {\r\n  i: Type.NUMERIC,\r\n  s: Type.STRING,\r\n  g: Type.GUID,\r\n  b: Type.BYTESTRING,\r\n};\r\n\r\n/**\r\n * Resource nodes are only allowed to have these child nodes.\r\n * @type {Set<string>}\r\n */\r\nconst possibleResourceChildNodes = new Set(['Translate', 'Compress']);\r\n\r\n/**\r\n * A wrapper around {@link node-opcua~NodeId}.\r\n */\r\nexport default class NodeId extends OpcNodeId {\r\n  /**\r\n   * Creates a new NodeId. Can be called in multiple ways:\r\n   *  - with a {@link node-opcua~NodeIdType}, a value and a namespace (defaults to 0),\r\n   *  - with a value only (type will be taken from it, namespace defaults to 1) or\r\n   *  - with a {@link NodeId}s string representation (for example `ns=1;s=AGENT.DISPLAYS`).\r\n   * @param {node-opcua~NodeIdType|string|number} typeOrValue The type or value to use.\r\n   * @param {(number|string)} [value] The value to use.\r\n   * @param {number} [namespace=1] The namespace to use.\r\n   */\r\n  constructor(typeOrValue, value, namespace = 1) {\r\n    if (!(typeOrValue in Type) && typeof typeOrValue !== 'number') {\r\n      let m = null;\r\n\r\n      if (typeof typeOrValue === 'string') {\r\n        m = typeOrValue.match(/^ns=([0-9]+);(i|s|g|b)=(.*)$/);\r\n      }\r\n\r\n      if (m === null) {\r\n        super(\r\n          Number.isNaN(Number.parseInt(typeOrValue, 10)) ? Type.STRING : Type.NUMERIC,\r\n          typeOrValue,\r\n          1\r\n        );\r\n      } else {\r\n        const n = Number.parseInt(m[1], 10);\r\n        const t = TypeForIdentifier[m[2]];\r\n        const v = t === Type.NUMERIC ? Number.parseInt(m[3], 10) : m[3];\r\n\r\n        super(t, v, n);\r\n      }\r\n    } else {\r\n      super(typeOrValue, value, namespace);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a new NodeId based on a file path.\r\n   * @param {string} path The file path to use.\r\n   * @return {NodeId} The resulting NodeId.\r\n   */\r\n  static fromFilePath(path) {\r\n    let separator = '.';\r\n\r\n    const value = path.split(sep).reduce((result, current, index, components) => {\r\n      const next = `${result ? `${result}${separator}` : ''}${current.replace('%2F', '/')}`;\r\n\r\n      if (current === 'RESOURCES') {\r\n        separator = '/';\r\n      } else if (separator === '/' && possibleResourceChildNodes.has(components[index + 1])) {\r\n        separator = '.';\r\n      }\r\n\r\n      return next;\r\n    }, '');\r\n\r\n    return new NodeId(NodeId.NodeIdType.STRING, value, 1);\r\n  }\r\n\r\n  /**\r\n   * The node id's value, encoded to a file path.\r\n   * @type {string}\r\n   */\r\n  get filePath() {\r\n    const parts = this.value.split('RESOURCES');\r\n    parts[0] = parts[0].replace('/', '%2F').split('.').join('/');\r\n\r\n    return parts.join('RESOURCES');\r\n  }\r\n\r\n  // eslint-disable-next-line jsdoc/require-description-complete-sentence\r\n  /**\r\n   * Returns the last separator in a string node id's path, e.g.:\r\n   * - `'/'` for `ns=1;SYSTEM.LIBRARY.RESOURCES/index.htm`,\r\n   * - `'.'` for `ns=1;AGENT.DISPLAYS.Main`.\r\n   * @type {?string} `null` for non-string node ids, `'/'` for resource paths, `'.'` for regular\r\n   * string node ids.\r\n   */\r\n  get _lastSeparator() {\r\n    if (this.identifierType !== NodeId.NodeIdType.STRING) {\r\n      return null;\r\n    }\r\n\r\n    return ~this.value.indexOf('/') ? '/' : '.';\r\n  }\r\n\r\n  /**\r\n   * The parent node id, or `null`.\r\n   * @type {?NodeId}\r\n   * @deprecated Doesn't work properly in some edge cases. Use AtviseFile#parentNodeId instead\r\n   * whenever possible.\r\n   */\r\n  get parent() {\r\n    if (this.identifierType !== NodeId.NodeIdType.STRING) {\r\n      return null;\r\n    }\r\n\r\n    /*\r\n      Known aliases:\r\n        - AGENT and SYSTEM are children of \"Objects\"\r\n        - ObjectTypes.PROJECT and VariableTypes.PROJECT are children of their base Types\r\n    */\r\n    // FIXME: Should be in mapping transformer\r\n    if (this.value === 'AGENT' || this.value === 'SYSTEM') {\r\n      return new NodeId(NodeId.NodeIdType.NUMERIC, 85, 0); // \"Objects\"\r\n    } else if (this.value === 'ObjectTypes.PROJECT') {\r\n      return new NodeId(NodeId.NodeIdType.NUMERIC, 58, 0); // \"BaseObjectType\"\r\n    } else if (this.value === 'VariableTypes.PROJECT') {\r\n      return new NodeId(NodeId.NodeIdType.NUMERIC, 62, 0); // \"BaseVariableType\"\r\n    }\r\n\r\n    const parentValue = this.value.substr(0, this.value.lastIndexOf(this._lastSeparator));\r\n\r\n    if (!parentValue) {\r\n      // Root node -> 'Objects' is parent\r\n      return new NodeId(NodeId.NodeIdType.NUMERIC, 85, 0);\r\n    }\r\n\r\n    return new NodeId(NodeId.NodeIdType.STRING, parentValue, this.namespace);\r\n  }\r\n\r\n  /**\r\n   * Checks if the node is a child of another.\r\n   * @param {NodeId} parent The possible parent to check.\r\n   * @return {boolean} `true` if *this* is a child node of *parent*.\r\n   */\r\n  isChildOf(parent) {\r\n    if (\r\n      this.identifierType !== NodeId.NodeIdType.STRING ||\r\n      parent.identifierType !== NodeId.NodeIdType.STRING\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    if (this.namespace !== parent.namespace || this.value === parent.value) {\r\n      return false;\r\n    }\r\n\r\n    const [prefix, postfix] = this.value.split(parent.value);\r\n\r\n    return (\r\n      prefix === '' &&\r\n      postfix &&\r\n      (postfix[0] === this._lastSeparator ||\r\n        (this._lastSeparator === '/' && postfix[0] === '.' && postfix.split('.').length === 2))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * The node id's browsename as string.\r\n   * @type {string}\r\n   */\r\n  get browseName() {\r\n    if (this.identifierType !== NodeId.NodeIdType.STRING) {\r\n      return null;\r\n    }\r\n\r\n    return this.value.substr(this.value.lastIndexOf(this._lastSeparator) + 1);\r\n  }\r\n\r\n  /**\r\n   * Returns a string in the format \"namespace value\" that is printed when inspecting the NodeId\r\n   * using {@link util~inspect}.\r\n   * @see https://nodejs.org/api/util.html#util_util_inspect_object_options\r\n   * @param {number} depth The depth to inspect.\r\n   * @param {Object} options The options to use.\r\n   * @return {string} A string in the format \"namespace value\".\r\n   */\r\n  inspect(depth, options) {\r\n    return [\r\n      options.stylize(this.namespace, 'number'),\r\n      options.stylize(this.value, this.identifierType === Type.NUMERIC ? 'number' : 'string'),\r\n    ].join(' ');\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}