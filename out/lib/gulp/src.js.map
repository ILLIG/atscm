{"version":3,"file":"src.js","names":["_path","require","_fsExtra","_nodeclass","_variant","_gulplog","_interopRequireDefault","_pQueue","_Node","_ProjectConfig","_coding","e","__esModule","default","ownKeys","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_objectWithoutProperties","i","_objectWithoutPropertiesLoose","n","indexOf","propertyIsEnumerable","call","hasOwnProperty","_toPropertyKey","value","configurable","writable","_toPrimitive","Symbol","toPrimitive","TypeError","String","Number","FileNode","SourceNode","constructor","_ref","nodeClass","dataType","arrayType","references","nodeId","options","NodeClass","specialId","entries","ref","ids","type","ReferenceTypeIds","parseInt","id","addReference","_resolvedReferences","valueSoFar","DataType","VariantArrayType","setRawValue","_rawValue","hasRawValue","stringValue","Error","toString","valueIsComplete","undefined","variantValue","decodeVariant","exports","isDefinitionFile","path","Boolean","basename","match","containerFileRegexp","SourceBrowser","handleNode","readNodeFile","atserverVersion","Set","Map","_queue","PromiseQueue","concurrency","_nodeHandler","_readNodeFile","_atserverVersion","browse","processError","done","Promise","resolve","reject","_reject","err","Logger","debug","pause","clear","processPath","onIdle","then","_dependingOn","size","Array","from","join","add","_processPath","catch","readNode","parent","children","singleNode","s","stat","isDirectory","container","nextChildren","readdir","reduce","nodes","p","node","name","parts","noProcessingNeeded","find","current","raw","rest","split","concat","assign","inheritParent","endsWith","isFile","warn","slice","dirname","_pushedPath","has","dir","rel","readJSON","relative","definitionPath","_processNode","waitingFor","deps","result","_pushed","ProjectConfig","isExternal","d","set","get","_pushNode","Variable","readFile","code","child","depending","dep","delete","src","browser"],"sources":["../../../src/lib/gulp/src.ts"],"sourcesContent":["import { join, basename, dirname } from 'path';\r\nimport { readdir, stat, readFile, readJSON } from 'fs-extra';\r\nimport { NodeClass } from 'node-opcua/lib/datamodel/nodeclass';\r\nimport { DataType, VariantArrayType, Variant } from 'node-opcua/lib/datamodel/variant';\r\nimport { KeyOf } from 'node-opcua/lib/misc/enum.js';\r\nimport Logger from 'gulplog';\r\nimport PromiseQueue from 'p-queue';\r\nimport { SourceNode, ReferenceTypeIds, NodeOptions, NodeDefinition } from '../model/Node';\r\nimport ProjectConfig from '../../config/ProjectConfig';\r\nimport { decodeVariant } from '../coding';\r\nimport { Omit } from '../helpers/types';\r\n\r\ntype FileNodeOptions = Omit<NodeOptions, 'nodeClass'> & NodeDefinition;\r\n\r\n/**\r\n * A node returned by the {@link SourceStream}.\r\n */\r\nexport class FileNode extends SourceNode {\r\n  /**\r\n   * Creates a new node.\r\n   * @param options The options to use.\r\n   */\r\n  public constructor({\r\n    nodeClass,\r\n    dataType,\r\n    arrayType,\r\n    references,\r\n    nodeId,\r\n    ...options\r\n  }: FileNodeOptions) {\r\n    super({\r\n      ...options,\r\n      nodeClass: NodeClass[nodeClass || 'Variable'],\r\n    });\r\n\r\n    if (nodeId) {\r\n      /**\r\n       * The id stored in the definition file\r\n       * @type {NodeId}\r\n       */\r\n      this.specialId = nodeId;\r\n    }\r\n\r\n    if (references) {\r\n      (Object.entries(references) as [\r\n        keyof typeof ReferenceTypeIds,\r\n        (string | number)[]\r\n      ][]).forEach(([ref, ids]) => {\r\n        const type = ReferenceTypeIds[ref] || parseInt(ref, 10);\r\n\r\n        ids.forEach((id) => {\r\n          this.references.addReference(type, id);\r\n          this._resolvedReferences.addReference(type, id);\r\n        });\r\n      });\r\n    }\r\n\r\n    if (dataType) {\r\n      this.valueSoFar.dataType = DataType[dataType];\r\n    }\r\n\r\n    if (arrayType) {\r\n      this.valueSoFar.arrayType = VariantArrayType[arrayType];\r\n    }\r\n  }\r\n\r\n  protected _rawValue?: Buffer;\r\n\r\n  public setRawValue(value: Buffer): void {\r\n    this._rawValue = value;\r\n  }\r\n\r\n  private hasRawValue(): this is { _rawValue: Buffer } {\r\n    return !!this._rawValue;\r\n  }\r\n\r\n  /**\r\n   * A node's raw value, decoded into a string.\r\n   */\r\n  public get stringValue(): string {\r\n    if (!this.hasRawValue()) {\r\n      throw new Error('No value read yet. Ensure to call #setRawValue');\r\n    }\r\n\r\n    return this._rawValue.toString();\r\n  }\r\n\r\n  /** The node's value (may be incomplete, use {@link FileNode#value} to ensure). */\r\n  public valueSoFar: Partial<Variant> = {};\r\n\r\n  private valueIsComplete(): this is { valueSoFar: Variant } {\r\n    return this.valueSoFar.value !== undefined;\r\n  }\r\n\r\n  /**\r\n   * A node's {@link node-opcua~Variant} value.\r\n   */\r\n  public get variantValue(): Variant {\r\n    const value = this.valueSoFar;\r\n\r\n    if (!this.valueIsComplete()) {\r\n      if (!value.dataType) {\r\n        throw new Error(`${this.nodeId} has no data type`);\r\n      }\r\n      if (!value.arrayType) {\r\n        throw new Error(`${this.nodeId} has no array type`);\r\n      }\r\n      if (this.hasRawValue()) {\r\n        value.value = decodeVariant(this._rawValue, value);\r\n      }\r\n    }\r\n\r\n    return this.valueSoFar as Variant;\r\n  }\r\n\r\n  public get value(): Variant {\r\n    return this.variantValue;\r\n  }\r\n}\r\n\r\n// Helpers\r\n/**\r\n * Returns `true` for definition file paths.\r\n * @param path The path to check.\r\n * @return If the file at path is a definition file.\r\n */\r\nexport function isDefinitionFile(path: string): boolean {\r\n  return Boolean(basename(path).match(/^\\..*\\.json$/));\r\n}\r\n\r\n/**\r\n * Matches container files.\r\n */\r\nconst containerFileRegexp = /^\\.((Object|Variable)(Type)?|Method|View|(Reference|Data)Type)\\.json$/;\r\n\r\ntype NodeHandler<R = void> = (node: FileNode) => R;\r\n\r\ninterface SourceBrowserOptions {\r\n  handleNode: NodeHandler<Promise<void>>;\r\n  readNodeFile: NodeHandler<boolean>;\r\n  atserverVersion: string;\r\n}\r\n\r\n/**\r\n * Browses the local file system for nodes.\r\n */\r\nexport class SourceBrowser {\r\n  /** The queue processing incoming paths / nodes. @type {p-queue~PQueue} */\r\n  private _queue: PromiseQueue;\r\n\r\n  /** A callback called with every discovered node. */\r\n  private _nodeHandler: NodeHandler<Promise<void>>;\r\n  /** A callback deciding if a node file should be read. */\r\n  private _readNodeFile: NodeHandler<boolean>;\r\n\r\n  /** The pushed node's ids */\r\n  private _pushed = new Set<string>();\r\n  /** The pushed node's paths */\r\n  private _pushedPath = new Set<string>();\r\n  /** Stores how queued nodes depend on each other */\r\n  // eslint-disable-next-line no-spaced-func\r\n  private _dependingOn = new Map<string, (BrowsedFileNode & { waitingFor: Set<string> })[]>();\r\n\r\n  private _atserverVersion: string;\r\n\r\n  /**\r\n   * Sets up a new browser.\r\n   * @param options The options to apply.\r\n   * @param options.handleNode A callback called with every discovered node.\r\n   * @param options.readNodeFile A callback deciding if a node file should be read.\r\n   */\r\n  public constructor({ handleNode, readNodeFile, atserverVersion }: SourceBrowserOptions) {\r\n    this._queue = new PromiseQueue({\r\n      concurrency: 250,\r\n    });\r\n\r\n    this._nodeHandler = handleNode;\r\n    this._readNodeFile = readNodeFile;\r\n\r\n    // Setup context\r\n    this._atserverVersion = atserverVersion;\r\n  }\r\n\r\n  get atserverVersion(): string {\r\n    return this._atserverVersion;\r\n  }\r\n\r\n  /**\r\n   * A function to be called once an error occurres during parallel processing.\r\n   * @param error The error to exit with.\r\n   */\r\n  private _reject!: (error: Error) => void;\r\n\r\n  /**\r\n   * Starts the browser at the given path.\r\n   * @param path The path to start browsing at.\r\n   * @param options Passed directly to {@link SourceBrowser#processPath}.\r\n   * @return Fulfilled once browsing is complete.\r\n   */\r\n  public async browse(path: string, options = {}): Promise<void> {\r\n    let processError: Error;\r\n\r\n    const done = new Promise<void>((resolve, reject) => {\r\n      this._reject = (err) => {\r\n        if (processError) {\r\n          // Multiple errors occured. In most cases this means, that the server connection was\r\n          // closed after the first error.\r\n          Logger.debug('Additional error', err);\r\n          return;\r\n        }\r\n\r\n        processError = err;\r\n        this._queue.pause();\r\n        this._queue.clear();\r\n\r\n        reject(err);\r\n      };\r\n\r\n      // write initial path\r\n      this.processPath({ path, ...options });\r\n\r\n      this._queue.onIdle().then(() => {\r\n        if (processError) {\r\n          return;\r\n        }\r\n\r\n        if (this._dependingOn.size) {\r\n          reject(\r\n            new Error(`Some nodes are still waiting for dependencies\r\n  Missing nodes: ${Array.from(this._dependingOn.keys()).join(', ')}\r\n  - Pull these nodes or add them to the ignored ones`)\r\n          );\r\n        }\r\n\r\n        resolve();\r\n      });\r\n    });\r\n\r\n    return done;\r\n  }\r\n\r\n  /**\r\n   * Enqueues a {@link SourceBrowser#_processPath} call with the given options.\r\n   * @param options Passed directly to {@link SourceBrowser#_processPath}.\r\n   */\r\n  public processPath(options: ProcessPathOptions): Promise<FileNode | void> {\r\n    return this._queue.add(() => this._processPath(options).catch(this._reject));\r\n  }\r\n\r\n  /**\r\n   * Can be called by transformers to read this path before finishing it's parent nodes.\r\n   * @param {Object} options Passed directly to {@link SourceBrowser#_processPath}.\r\n   * @param {string} options.path The path to read.\r\n   */\r\n  public readNode({ path }: { path: string }): Promise<FileNode> {\r\n    return this._processPath({\r\n      path,\r\n      push: false,\r\n    }) as Promise<FileNode>; // NOTE: If `push` is true, the browser always returns a node.\r\n  }\r\n\r\n  /**\r\n   * Where the real browsing happens: Stats the given path, discovering new node definition files,\r\n   * if any and finally pushes discovered nodes to {@link SourceBrowser#_processNode}.\r\n   * @param {Object} options The options to use.\r\n   */\r\n  private async _processPath({\r\n    path,\r\n    parent,\r\n    children,\r\n    push = true,\r\n    singleNode = false,\r\n  }: ProcessPathOptions): Promise<void | FileNode> {\r\n    const s = await stat(path);\r\n\r\n    if (s.isDirectory()) {\r\n      let container;\r\n      const nextChildren = (await readdir(path)).reduce((nodes, p) => {\r\n        const node = {\r\n          name: p,\r\n          path: join(path, p),\r\n          push,\r\n        };\r\n\r\n        if (p.match(containerFileRegexp)) {\r\n          container = node;\r\n\r\n          return nodes;\r\n        }\r\n\r\n        let parts: string[];\r\n        const noProcessingNeeded = nodes.find((current) => {\r\n          const n = current.name;\r\n          if (n === `.${p}.json`) {\r\n            return true;\r\n          } // Skip files with definitions already present\r\n\r\n          const [raw, rest] = parts || (parts = p.split('.inner'));\r\n\r\n          if (rest === '' && (n === raw || n === `.${raw}.json`)) {\r\n            // Got an *.inner directory\r\n            // eslint-disable-next-line no-param-reassign\r\n            current.children = (current.children || []).concat(node);\r\n            return true;\r\n          }\r\n\r\n          return false;\r\n        });\r\n\r\n        return noProcessingNeeded ? nodes : nodes.concat(node);\r\n      }, [] as DiscoveredNodeFile[]);\r\n\r\n      if (container) {\r\n        return this._processPath(Object.assign(container, { children: nextChildren, parent }));\r\n      } else if (singleNode) {\r\n        Logger.debug(`Pushing parent at ${path}`);\r\n        return this._processPath({ path: join(path, '../'), parent, children, push });\r\n      }\r\n\r\n      const inheritParent = path.endsWith('.inner');\r\n      nextChildren.forEach((node) => {\r\n        if (inheritParent) {\r\n          // eslint-disable-next-line no-param-reassign\r\n          node.parent = parent;\r\n        }\r\n        this.processPath(node);\r\n      });\r\n    } else if (s.isFile()) {\r\n      if (!isDefinitionFile(path)) {\r\n        // FIXME: Browse parent here for watch task / Variable source node\r\n        // (e.g. AGENT/DISPLAYS/Default.display/Default.js changed)\r\n\r\n        if (singleNode) {\r\n          Logger.debug(`Pushing parent at ${path}`);\r\n          return this._processPath({ path: join(path, '../'), parent, children, push, singleNode });\r\n        }\r\n\r\n        Logger.warn(`Not a definition file at ${path}`);\r\n        return Promise.resolve();\r\n      }\r\n\r\n      let name = basename(path, '.json').slice(1);\r\n      if (name.length >= 4 && NodeClass[name as KeyOf<typeof NodeClass>]) {\r\n        name = basename(dirname(path));\r\n      }\r\n\r\n      if (this._pushedPath.has(path)) {\r\n        // throw new Error('Double-handled node ' + path);\r\n        return Promise.resolve();\r\n      }\r\n\r\n      const dir = dirname(path);\r\n      const rel = join(dir, name);\r\n      const node: BrowsedFileNode = Object.assign(\r\n        new FileNode({\r\n          name,\r\n          parent,\r\n          ...((await readJSON(path)) as NodeDefinition),\r\n        }),\r\n        {\r\n          push, // FIXME: Remove?\r\n          children,\r\n          relative: rel,\r\n          definitionPath: path,\r\n        }\r\n      );\r\n\r\n      return this._processNode(node);\r\n    }\r\n\r\n    return Promise.resolve();\r\n  }\r\n\r\n  /**\r\n   * Handles a node's dependencies and calls {@link SourceBrowser#_pushNode} once it's ready.\r\n   * @param node A discovered node.\r\n   */\r\n  private _processNode(node: BrowsedFileNode): Promise<void | FileNode> {\r\n    // Build dependency map\r\n    if (!node.waitingFor) {\r\n      const deps = Array.from(node.references).reduce(\r\n        (result, [, ids]) =>\r\n          result.concat(\r\n            Array.from(ids).filter((id) => {\r\n              if (typeof id === 'number') {\r\n                // OPC-UA node\r\n                return false;\r\n              }\r\n\r\n              return !this._pushed.has(id) && !ProjectConfig.isExternal(id);\r\n            }) as string[]\r\n          ),\r\n        [] as string[]\r\n      );\r\n      // eslint-disable-next-line no-param-reassign\r\n      node.waitingFor = new Set(deps);\r\n      deps.forEach((d) => {\r\n        this._dependingOn.set(\r\n          d,\r\n          (this._dependingOn.get(d) || []).concat(\r\n            node as BrowsedFileNode & {\r\n              waitingFor: Set<string>;\r\n            }\r\n          )\r\n        );\r\n      });\r\n    }\r\n\r\n    if (!node.waitingFor.size) {\r\n      return this._pushNode(node);\r\n    }\r\n\r\n    return Promise.resolve();\r\n  }\r\n\r\n  /**\r\n   * Reads a node's value file (if it's a variable) and calls {@link SourceBrowser#_nodeHandler}\r\n   * with it, finishing the node's processing and promoting it's dependents, if any.\r\n   * @param node A discovered node.\r\n   * @return The node, once it's fully processed.\r\n   */\r\n  private async _pushNode(node: BrowsedFileNode): Promise<FileNode> {\r\n    // Read node value\r\n    if (node.nodeClass === NodeClass.Variable && this._readNodeFile(node)) {\r\n      // eslint-disable-next-line no-param-reassign\r\n      await readFile(node.relative)\r\n        .then((value) => node.setRawValue(value))\r\n        .catch((err) => {\r\n          if (err.code === 'EISDIR') {\r\n            return;\r\n          }\r\n          throw new Error(`${err.code}: Error reading ${node.relative}`);\r\n        });\r\n    }\r\n\r\n    return this._nodeHandler(node).then(() => {\r\n      // Handle children\r\n      if (node.children) {\r\n        node.children.forEach((child) => {\r\n          // eslint-disable-next-line no-param-reassign\r\n          child.parent = node;\r\n          this.processPath(child);\r\n        });\r\n      }\r\n\r\n      // Handle dependencies\r\n      const depending = this._dependingOn.get(node.nodeId);\r\n      if (depending) {\r\n        depending.forEach((dep) => {\r\n          dep.waitingFor.delete(node.nodeId);\r\n\r\n          if (!dep.waitingFor.size) {\r\n            // All dependencies resolved\r\n            return this._pushNode(dep);\r\n          }\r\n\r\n          // Still waiting\r\n          return Logger.debug('Still waiting', dep.nodeId, Array.from(dep.waitingFor));\r\n        });\r\n      }\r\n\r\n      // eslint-disable-next-line no-param-reassign\r\n      delete node.waitingFor;\r\n      this._dependingOn.delete(node.nodeId);\r\n      this._pushed.add(node.nodeId);\r\n\r\n      // Mark as pushed\r\n      this._pushedPath.add(node.definitionPath);\r\n\r\n      return node;\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Starts a new source browser at the given path.\r\n * @param path The path to start browsing with.\r\n * @param options Passed directly to {@link SourceBrowser#constructor}.\r\n * @return A promise resolved once browsing is finished, with an addional *browser* property holding\r\n * the SourceBrowser instance created.\r\n */\r\nexport default function src(\r\n  path: string,\r\n  options: SourceBrowserOptions\r\n): Promise<void> & {\r\n  browser: SourceBrowser;\r\n} {\r\n  const browser = new SourceBrowser(options);\r\n\r\n  return Object.assign(browser.browse(path, options), { browser });\r\n}\r\n\r\n// Option types\r\n\r\n/** A file node while being processed by a source browser */\r\ntype BrowsedFileNode = FileNode & {\r\n  waitingFor?: Set<string>;\r\n  children?: DiscoveredNodeFile[];\r\n  relative: string;\r\n  definitionPath: string;\r\n};\r\n\r\ninterface DiscoveredNodeFile {\r\n  path: string;\r\n  name: string;\r\n  push: boolean;\r\n  parent?: FileNode;\r\n  children?: DiscoveredNodeFile[];\r\n}\r\n\r\ntype ProcessPathOptions = Partial<DiscoveredNodeFile> & {\r\n  path: string;\r\n  singleNode?: boolean;\r\n};\r\n"],"mappings":"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","ignoreList":[]}