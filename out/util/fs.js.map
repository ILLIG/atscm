{"version":3,"file":"fs.js","names":["_path","require","_fs","getStat","path","Promise","resolve","reject","stat","resolvePath","err","stats","validateDirectoryExists","directoryPath","then","isDirectory","Error"],"sources":["../../src/util/fs.js"],"sourcesContent":["import { resolve as resolvePath } from 'path';\r\nimport { stat } from 'fs';\r\n\r\n/**\r\n * Returns the {@link fs~Stats} for a path.\r\n * @param {string} path The path to look at.\r\n * @return {Promise<fs~Stats, Error>} Fulfilled with the requested stats or rejected with the error\r\n * that occurred.\r\n */\r\nexport function getStat(path) {\r\n  return new Promise((resolve, reject) => {\r\n    stat(resolvePath(path), (err, stats) => {\r\n      if (err) {\r\n        reject(err);\r\n      } else {\r\n        resolve(stats);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Checks it a given path holds a directory and returns it's {@link fs~Stats} if found.\r\n * @param {string} directoryPath The path to look at.\r\n * @return {Promise<fs~Stats, Error>} Fulfilled with the directory's stats or rejected with the\r\n * error that occurred.\r\n */\r\nexport function validateDirectoryExists(directoryPath) {\r\n  return getStat(directoryPath).then((stats) => {\r\n    if (!stats.isDirectory()) {\r\n      throw new Error(`${resolvePath(directoryPath)} is not a directory`);\r\n    }\r\n\r\n    return stat;\r\n  });\r\n}\r\n"],"mappings":";;;;;;;AAAA,IAAAA,KAAA,GAAAC,OAAA;AACA,IAAAC,GAAA,GAAAD,OAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASE,OAAOA,CAACC,IAAI,EAAE;EAC5B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,IAAAC,QAAI,EAAC,IAAAC,aAAW,EAACL,IAAI,CAAC,EAAE,CAACM,GAAG,EAAEC,KAAK,KAAK;MACtC,IAAID,GAAG,EAAE;QACPH,MAAM,CAACG,GAAG,CAAC;MACb,CAAC,MAAM;QACLJ,OAAO,CAACK,KAAK,CAAC;MAChB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,uBAAuBA,CAACC,aAAa,EAAE;EACrD,OAAOV,OAAO,CAACU,aAAa,CAAC,CAACC,IAAI,CAAEH,KAAK,IAAK;IAC5C,IAAI,CAACA,KAAK,CAACI,WAAW,CAAC,CAAC,EAAE;MACxB,MAAM,IAAIC,KAAK,CAAC,GAAG,IAAAP,aAAW,EAACI,aAAa,CAAC,qBAAqB,CAAC;IACrE;IAEA,OAAOL,QAAI;EACb,CAAC,CAAC;AACJ","ignoreList":[]}