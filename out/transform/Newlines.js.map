{"version":3,"file":"Newlines.js","names":["_os","require","_nodeOpcua","_PartialTransformer","_interopRequireDefault","e","__esModule","default","trailingNewlineRegExp","NewlinesTransformer","PartialTransformer","constructor","options","_addTrailingNewlines","trailingNewlines","shouldBeTransformed","file","stem","dataType","DataType","ByteString","transformFromDB","enc","callback","str","contents","toString","replace","EOL","match","Buffer","from","transformFromFilesystem","transformsReferenceConfigFiles","exports"],"sources":["../../src/transform/Newlines.js"],"sourcesContent":["import { EOL } from 'os';\r\nimport { DataType } from 'node-opcua';\r\nimport PartialTransformer from '../lib/transform/PartialTransformer';\r\n\r\n/**\r\n * A regular expression matching trailing newlines.\r\n */\r\nconst trailingNewlineRegExp = /\\r?\\n$/;\r\n\r\n/**\r\n * A transformer that handles newline characters in files. During a pull, all breaks are converted\r\n * the OS-native EOL character and (optionally) a trailing newline is added (for better git diffs).\r\n * On push, CRLF characters are used and those trailing newlines are removed again.\r\n */\r\nexport default class NewlinesTransformer extends PartialTransformer {\r\n  /**\r\n   * Creates a new newline transformer.\r\n   * @param {Object} [options={}] The options to use.\r\n   * @param {boolean} [options.trailingNewlines] If trailing newlines should be added. Pass *true*\r\n   * for better git diffs.\r\n   */\r\n  constructor(options = {}) {\r\n    super(options);\r\n\r\n    /**\r\n     * If newlines should be added to pulled files.\r\n     * @type {boolean}\r\n     */\r\n    this._addTrailingNewlines = options.trailingNewlines || false;\r\n  }\r\n\r\n  /**\r\n   * Returns `true` for all files except binary ones.\r\n   * @param {AtviseFile} file The file being transformed.\r\n   * @return {boolean} Always `true`.\r\n   */\r\n  shouldBeTransformed(file) {\r\n    return file.stem[0] === '.' || file.dataType !== DataType.ByteString;\r\n  }\r\n\r\n  /**\r\n   * Adds converts line breaks to the current OS's native EOL characters and adds trailing newlines.\r\n   * @param {AtviseFile} file The file being transformed.\r\n   * @param {string} enc The encoding used.\r\n   * @param {function(err: ?Error, data: ?AtviseFile)} callback Called with the corrected file.\r\n   */\r\n  transformFromDB(file, enc, callback) {\r\n    let str = file.contents.toString().replace(/\\r?\\n/g, EOL);\r\n\r\n    if (this._addTrailingNewlines && !str.match(trailingNewlineRegExp)) {\r\n      str += EOL;\r\n    }\r\n\r\n    file.contents = Buffer.from(str); // eslint-disable-line no-param-reassign\r\n\r\n    callback(null, file);\r\n  }\r\n\r\n  /**\r\n   * Removes trailing newlines and converts all breaks to CRLF.\r\n   * @param {AtviseFile} file The file being transformed.\r\n   * @param {string} enc The encoding used.\r\n   * @param {function(err: ?Error, data: ?AtviseFile)} callback Called with resulting file.\r\n   */\r\n  transformFromFilesystem(file, enc, callback) {\r\n    let str = file.contents.toString().replace(/\\r?\\n/g, '\\r\\n');\r\n\r\n    if (this._addTrailingNewlines) {\r\n      str = str.replace(trailingNewlineRegExp, '');\r\n    }\r\n\r\n    file.contents = Buffer.from(str); // eslint-disable-line no-param-reassign\r\n\r\n    callback(null, file);\r\n  }\r\n\r\n  /**\r\n   * `true` because we want to transform all files.\r\n   * @type {boolean}\r\n   */\r\n  get transformsReferenceConfigFiles() {\r\n    return true;\r\n  }\r\n}\r\n"],"mappings":";;;;;;AAAA,IAAAA,GAAA,GAAAC,OAAA;AACA,IAAAC,UAAA,GAAAD,OAAA;AACA,IAAAE,mBAAA,GAAAC,sBAAA,CAAAH,OAAA;AAAqE,SAAAG,uBAAAC,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAErE;AACA;AACA;AACA,MAAMG,qBAAqB,GAAG,QAAQ;;AAEtC;AACA;AACA;AACA;AACA;AACe,MAAMC,mBAAmB,SAASC,2BAAkB,CAAC;EAClE;AACF;AACA;AACA;AACA;AACA;EACEC,WAAWA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;IACxB,KAAK,CAACA,OAAO,CAAC;;IAEd;AACJ;AACA;AACA;IACI,IAAI,CAACC,oBAAoB,GAAGD,OAAO,CAACE,gBAAgB,IAAI,KAAK;EAC/D;;EAEA;AACF;AACA;AACA;AACA;EACEC,mBAAmBA,CAACC,IAAI,EAAE;IACxB,OAAOA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,IAAID,IAAI,CAACE,QAAQ,KAAKC,mBAAQ,CAACC,UAAU;EACtE;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,eAAeA,CAACL,IAAI,EAAEM,GAAG,EAAEC,QAAQ,EAAE;IACnC,IAAIC,GAAG,GAAGR,IAAI,CAACS,QAAQ,CAACC,QAAQ,CAAC,CAAC,CAACC,OAAO,CAAC,QAAQ,EAAEC,OAAG,CAAC;IAEzD,IAAI,IAAI,CAACf,oBAAoB,IAAI,CAACW,GAAG,CAACK,KAAK,CAACrB,qBAAqB,CAAC,EAAE;MAClEgB,GAAG,IAAII,OAAG;IACZ;IAEAZ,IAAI,CAACS,QAAQ,GAAGK,MAAM,CAACC,IAAI,CAACP,GAAG,CAAC,CAAC,CAAC;;IAElCD,QAAQ,CAAC,IAAI,EAAEP,IAAI,CAAC;EACtB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEgB,uBAAuBA,CAAChB,IAAI,EAAEM,GAAG,EAAEC,QAAQ,EAAE;IAC3C,IAAIC,GAAG,GAAGR,IAAI,CAACS,QAAQ,CAACC,QAAQ,CAAC,CAAC,CAACC,OAAO,CAAC,QAAQ,EAAE,MAAM,CAAC;IAE5D,IAAI,IAAI,CAACd,oBAAoB,EAAE;MAC7BW,GAAG,GAAGA,GAAG,CAACG,OAAO,CAACnB,qBAAqB,EAAE,EAAE,CAAC;IAC9C;IAEAQ,IAAI,CAACS,QAAQ,GAAGK,MAAM,CAACC,IAAI,CAACP,GAAG,CAAC,CAAC,CAAC;;IAElCD,QAAQ,CAAC,IAAI,EAAEP,IAAI,CAAC;EACtB;;EAEA;AACF;AACA;AACA;EACE,IAAIiB,8BAA8BA,CAAA,EAAG;IACnC,OAAO,IAAI;EACb;AACF;AAACC,OAAA,CAAA3B,OAAA,GAAAE,mBAAA","ignoreList":[]}