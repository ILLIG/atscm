{"version":3,"file":"InitTask.js","names":["_path","require","_gulp","_gulpCompileHandlebars","_interopRequireDefault","_gulpReplace","_handlebarsHelpers","_streamToPromise","_through","_camelcase","_dependencies","e","__esModule","default","pascalCase","str","camelCase","toLiteral","value","string","JSON","stringify","InitTask","filesToHandle","langId","map","p","join","__dirname","run","options","configLang","install","deps","lang","renameGitignore","through","obj","file","_","callback","basename","stream","src","dot","pipe","replace","name","handlebars","helpers","dest","streamToPromise","exports"],"sources":["../../src/init/InitTask.js"],"sourcesContent":["import { join } from 'path';\r\nimport { src, dest } from 'gulp';\r\nimport handlebars from 'gulp-compile-handlebars';\r\nimport replace from 'gulp-replace';\r\nimport helpers from 'handlebars-helpers';\r\nimport streamToPromise from 'stream-to-promise';\r\nimport through from 'through2';\r\nimport camelCase from 'camelcase';\r\nimport deps from '../../res/init/templates/dependencies.json';\r\n\r\n/**\r\n * Converts a string to pascal case.\r\n * @param {string} str The string to convert.\r\n */\r\nconst pascalCase = (str) => camelCase(str, { pascalCase: true });\r\n\r\n/**\r\n * Converts a value to a valid JavaScript literal.\r\n * @param {any} value The value to convert.\r\n */\r\nconst toLiteral = (value) =>\r\n  ({\r\n    string: `'${value}'`,\r\n  }[typeof value] || JSON.stringify(value));\r\n\r\n/**\r\n * The action run when running \"atscm init\".\r\n */\r\nexport default class InitTask {\r\n  /**\r\n   * Returns the globs of the processed files for the given config lanugage.\r\n   * @param {string} langId The configuration language used.\r\n   * @return {string[]} Globs of the files to handle.\r\n   */\r\n  static filesToHandle(langId) {\r\n    return [\r\n      './general/**/*',\r\n      './general/**/.*',\r\n      `./lang/${langId}/**/*.*`,\r\n      `./lang/${langId}/**/.*`,\r\n    ].map((p) => join(__dirname, '../../res/init/templates', p));\r\n  }\r\n\r\n  /**\r\n   * Runs the task with the given options.\r\n   * @param {Object} options The options to use.\r\n   * @return {Promise<{ install: string[] }, Error>} Resolved with information on further actions\r\n   * to run or rejected if the task failed.\r\n   */\r\n  static async run(options) {\r\n    const langId = options.configLang;\r\n\r\n    const install = deps.lang[langId];\r\n\r\n    const renameGitignore = through.obj((file, _, callback) => {\r\n      if (file.basename === 'gitignore') {\r\n        // eslint-disable-next-line no-param-reassign\r\n        file.basename = '.gitignore';\r\n      }\r\n\r\n      callback(null, file);\r\n    });\r\n\r\n    const stream = src(this.filesToHandle(langId), { dot: true })\r\n      .pipe(replace(/[\\s\\S]*\\/\\/\\* start output\\s*/, ''))\r\n      .pipe(replace('__CONFIG_CLASS_NAME__', pascalCase(options.name)))\r\n      .pipe(replace(/\\/\\/\\*\\s?/g, ''))\r\n      .pipe(replace(/__INIT__.([a-z]+)/gi, (_, name) => toLiteral(options[name])))\r\n      .pipe(renameGitignore)\r\n      .pipe(\r\n        handlebars(options, {\r\n          helpers: helpers(),\r\n        })\r\n      )\r\n      .pipe(dest('./'));\r\n\r\n    await streamToPromise(stream);\r\n\r\n    return { install };\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}