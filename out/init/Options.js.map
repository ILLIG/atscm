{"version":3,"file":"Options.js","names":["_path","require","_Option","_interopRequireDefault","_Atviseproject","_OptionsValidator","e","__esModule","default","ConfigLangs","exports","TypeScript","projectName","dirname","InitOptions","name","InitOption","message","basename","process","cwd","validate","Validator","description","author","atviseHost","Atviseproject","host","atvisePortOpc","port","opc","atvisePortHttp","http","useLogin","type","atviseUser","when","answers","atvisePassword","configLang","choices","Object","keys","map","value","InitOptionsAsArray","assign","_default"],"sources":["../../src/init/Options.js"],"sourcesContent":["import { basename } from 'path';\r\nimport InitOption from '../lib/init/Option';\r\nimport Atviseproject from '../lib/config/Atviseproject';\r\nimport Validator from './OptionsValidator';\r\n\r\n/**\r\n * A map providing dirnames for config langs\r\n * @type {Map<String, String>}\r\n */\r\nexport const ConfigLangs = {\r\n  'ES2015 JavaScript': 'es2015',\r\n  'Regular JavaScript': 'es5',\r\n  TypeScript: 'ts',\r\n};\r\n\r\n/**\r\n * Suggests a project name based on the name of the directory 'atscm init' was called in.\r\n * @param {string} dirname The current working directory's name.\r\n * @return {string} The suggested name.\r\n */\r\nfunction projectName(dirname) {\r\n  if (dirname === 'atscm') {\r\n    return 'atscm-project';\r\n  }\r\n\r\n  return dirname;\r\n}\r\n\r\n/**\r\n * Options available for the \"atscm init\" command.\r\n * @type {Object}\r\n * @property {InitOption<input>} name The new project's name.\r\n * @property {InitOption<input>} description The new project's description.\r\n * @property {InitOption<input>} author The new project's author.\r\n * @property {InitOption<input>} atviseHost The new project's atvise server host.\r\n * @property {InitOption<input>} atvisePortOpc The new project's atvise server OPC port.\r\n * @property {InitOption<input>} atvisePortHttp The new project's atvise server HTTP port.\r\n * @property {InitOption<confirm>} useLogin If the new porject's atvise server requires login.\r\n * @property {InitOption<input>} atviseUsername The new project's atvise server login name.\r\n * @property {InitOption<input>} atvisePassword The new project's atvise server login password.\r\n * @property {InitOption<list>} configLang The language to use for the new project's configuration.\r\n */\r\nexport const InitOptions = {\r\n  name: new InitOption({\r\n    message: 'Project name',\r\n    default: projectName(basename(process.cwd())),\r\n    validate: Validator.name,\r\n  }),\r\n  description: new InitOption('Project description'),\r\n  author: new InitOption('Project author'),\r\n  atviseHost: new InitOption('Atvise server host', Atviseproject.host),\r\n  atvisePortOpc: new InitOption('Atvise OPC port', Atviseproject.port.opc),\r\n  atvisePortHttp: new InitOption('Atvise HTTP port', Atviseproject.port.http),\r\n  useLogin: new InitOption({\r\n    message: 'Does your atvise server require login',\r\n    type: 'confirm',\r\n    default: false,\r\n  }),\r\n  atviseUser: new InitOption({\r\n    message: ' - Username',\r\n    when: (answers) => answers.useLogin,\r\n  }),\r\n  atvisePassword: new InitOption({\r\n    message: ' - Password',\r\n    when: (answers) => answers.useLogin,\r\n  }),\r\n  configLang: new InitOption({\r\n    type: 'list',\r\n    message: 'Configuration language to use',\r\n    choices: Object.keys(ConfigLangs).map((name) => ({ name, value: ConfigLangs[name] })),\r\n  }),\r\n};\r\n\r\n/**\r\n * {@link InitOptions}, exported as an array. Required to run {@link Inquirer}.\r\n * @type {InitOption[]}\r\n */\r\nconst InitOptionsAsArray = Object.keys(InitOptions).map((name) =>\r\n  Object.assign({ name }, InitOptions[name])\r\n);\r\n\r\nexport default InitOptionsAsArray;\r\n"],"mappings":";;;;;;AAAA,IAAAA,KAAA,GAAAC,OAAA;AACA,IAAAC,OAAA,GAAAC,sBAAA,CAAAF,OAAA;AACA,IAAAG,cAAA,GAAAD,sBAAA,CAAAF,OAAA;AACA,IAAAI,iBAAA,GAAAF,sBAAA,CAAAF,OAAA;AAA2C,SAAAE,uBAAAG,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAE3C;AACA;AACA;AACA;AACO,MAAMG,WAAW,GAAAC,OAAA,CAAAD,WAAA,GAAG;EACzB,mBAAmB,EAAE,QAAQ;EAC7B,oBAAoB,EAAE,KAAK;EAC3BE,UAAU,EAAE;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,SAASC,WAAWA,CAACC,OAAO,EAAE;EAC5B,IAAIA,OAAO,KAAK,OAAO,EAAE;IACvB,OAAO,eAAe;EACxB;EAEA,OAAOA,OAAO;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,WAAW,GAAAJ,OAAA,CAAAI,WAAA,GAAG;EACzBC,IAAI,EAAE,IAAIC,eAAU,CAAC;IACnBC,OAAO,EAAE,cAAc;IACvBT,OAAO,EAAEI,WAAW,CAAC,IAAAM,cAAQ,EAACC,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC7CC,QAAQ,EAAEC,yBAAS,CAACP;EACtB,CAAC,CAAC;EACFQ,WAAW,EAAE,IAAIP,eAAU,CAAC,qBAAqB,CAAC;EAClDQ,MAAM,EAAE,IAAIR,eAAU,CAAC,gBAAgB,CAAC;EACxCS,UAAU,EAAE,IAAIT,eAAU,CAAC,oBAAoB,EAAEU,sBAAa,CAACC,IAAI,CAAC;EACpEC,aAAa,EAAE,IAAIZ,eAAU,CAAC,iBAAiB,EAAEU,sBAAa,CAACG,IAAI,CAACC,GAAG,CAAC;EACxEC,cAAc,EAAE,IAAIf,eAAU,CAAC,kBAAkB,EAAEU,sBAAa,CAACG,IAAI,CAACG,IAAI,CAAC;EAC3EC,QAAQ,EAAE,IAAIjB,eAAU,CAAC;IACvBC,OAAO,EAAE,uCAAuC;IAChDiB,IAAI,EAAE,SAAS;IACf1B,OAAO,EAAE;EACX,CAAC,CAAC;EACF2B,UAAU,EAAE,IAAInB,eAAU,CAAC;IACzBC,OAAO,EAAE,aAAa;IACtBmB,IAAI,EAAGC,OAAO,IAAKA,OAAO,CAACJ;EAC7B,CAAC,CAAC;EACFK,cAAc,EAAE,IAAItB,eAAU,CAAC;IAC7BC,OAAO,EAAE,aAAa;IACtBmB,IAAI,EAAGC,OAAO,IAAKA,OAAO,CAACJ;EAC7B,CAAC,CAAC;EACFM,UAAU,EAAE,IAAIvB,eAAU,CAAC;IACzBkB,IAAI,EAAE,MAAM;IACZjB,OAAO,EAAE,+BAA+B;IACxCuB,OAAO,EAAEC,MAAM,CAACC,IAAI,CAACjC,WAAW,CAAC,CAACkC,GAAG,CAAE5B,IAAI,KAAM;MAAEA,IAAI;MAAE6B,KAAK,EAAEnC,WAAW,CAACM,IAAI;IAAE,CAAC,CAAC;EACtF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAM8B,kBAAkB,GAAGJ,MAAM,CAACC,IAAI,CAAC5B,WAAW,CAAC,CAAC6B,GAAG,CAAE5B,IAAI,IAC3D0B,MAAM,CAACK,MAAM,CAAC;EAAE/B;AAAK,CAAC,EAAED,WAAW,CAACC,IAAI,CAAC,CAC3C,CAAC;AAAC,IAAAgC,QAAA,GAAArC,OAAA,CAAAF,OAAA,GAEaqC,kBAAkB","ignoreList":[]}